{"/home/travis/build/npmtest/node-npmtest-influx/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_influx */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-influx/lib.npmtest_influx.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/lib.npmtest_influx.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":51}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":57}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_influx */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_influx = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_influx = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-influx/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":50}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":64},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-influx && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_influx */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_influx","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_influx.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_influx.rollup.js'] =","            local.assetsDict['/assets.npmtest_influx.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_influx.__dirname + '/lib.npmtest_influx.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/index.js","s":{"1":1,"2":1,"3":4,"4":4,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":1,"68":0,"69":1,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":1,"104":0,"105":0,"106":0,"107":1,"108":0,"109":1,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":1,"118":0,"119":1,"120":0,"121":1,"122":0,"123":1,"124":0,"125":0,"126":0,"127":1,"128":0,"129":0,"130":0,"131":1,"132":0,"133":0,"134":0,"135":1,"136":0,"137":0,"138":1,"139":0,"140":0,"141":1,"142":0,"143":0,"144":0,"145":1,"146":0,"147":0,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":1,"169":0,"170":0,"171":0,"172":0,"173":0,"174":1,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":1,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":1,"192":0,"193":1,"194":0,"195":0,"196":0,"197":1,"198":0,"199":0,"200":0,"201":1,"202":1},"b":{"1":[4,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"fnMap":{"1":{"name":"__export","line":2,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":21}}},"2":{"name":"parseOptionsUrl","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":31}}},"3":{"name":"defaults","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":26}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":17},"end":{"line":61,"column":32}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":33},"end":{"line":62,"column":48}}},"6":{"name":"(anonymous_6)","line":114,"loc":{"start":{"line":114,"column":16},"end":{"line":114,"column":28}}},"7":{"name":"InfluxDB","line":180,"loc":{"start":{"line":180,"column":4},"end":{"line":180,"column":31}}},"8":{"name":"(anonymous_8)","line":205,"loc":{"start":{"line":205,"column":44},"end":{"line":205,"column":60}}},"9":{"name":"(anonymous_9)","line":215,"loc":{"start":{"line":215,"column":31},"end":{"line":215,"column":47}}},"10":{"name":"(anonymous_10)","line":218,"loc":{"start":{"line":218,"column":36},"end":{"line":218,"column":54}}},"11":{"name":"(anonymous_11)","line":237,"loc":{"start":{"line":237,"column":40},"end":{"line":237,"column":64}}},"12":{"name":"(anonymous_12)","line":249,"loc":{"start":{"line":249,"column":38},"end":{"line":249,"column":62}}},"13":{"name":"(anonymous_13)","line":261,"loc":{"start":{"line":261,"column":42},"end":{"line":261,"column":54}}},"14":{"name":"(anonymous_14)","line":263,"loc":{"start":{"line":263,"column":18},"end":{"line":263,"column":33}}},"15":{"name":"(anonymous_15)","line":263,"loc":{"start":{"line":263,"column":73},"end":{"line":263,"column":86}}},"16":{"name":"(anonymous_16)","line":274,"loc":{"start":{"line":274,"column":41},"end":{"line":274,"column":61}}},"17":{"name":"(anonymous_17)","line":279,"loc":{"start":{"line":279,"column":17},"end":{"line":279,"column":32}}},"18":{"name":"(anonymous_18)","line":279,"loc":{"start":{"line":279,"column":72},"end":{"line":279,"column":85}}},"19":{"name":"(anonymous_19)","line":302,"loc":{"start":{"line":302,"column":35},"end":{"line":302,"column":54}}},"20":{"name":"(anonymous_20)","line":312,"loc":{"start":{"line":312,"column":17},"end":{"line":312,"column":32}}},"21":{"name":"(anonymous_21)","line":312,"loc":{"start":{"line":312,"column":72},"end":{"line":312,"column":85}}},"22":{"name":"(anonymous_22)","line":323,"loc":{"start":{"line":323,"column":41},"end":{"line":323,"column":74}}},"23":{"name":"(anonymous_23)","line":354,"loc":{"start":{"line":354,"column":36},"end":{"line":354,"column":55}}},"24":{"name":"(anonymous_24)","line":379,"loc":{"start":{"line":379,"column":34},"end":{"line":379,"column":46}}},"25":{"name":"(anonymous_25)","line":395,"loc":{"start":{"line":395,"column":36},"end":{"line":395,"column":73}}},"26":{"name":"(anonymous_26)","line":411,"loc":{"start":{"line":411,"column":37},"end":{"line":411,"column":67}}},"27":{"name":"(anonymous_27)","line":426,"loc":{"start":{"line":426,"column":40},"end":{"line":426,"column":81}}},"28":{"name":"(anonymous_28)","line":442,"loc":{"start":{"line":442,"column":41},"end":{"line":442,"column":82}}},"29":{"name":"(anonymous_29)","line":456,"loc":{"start":{"line":456,"column":45},"end":{"line":456,"column":65}}},"30":{"name":"(anonymous_30)","line":468,"loc":{"start":{"line":468,"column":46},"end":{"line":468,"column":66}}},"31":{"name":"(anonymous_31)","line":480,"loc":{"start":{"line":480,"column":34},"end":{"line":480,"column":54}}},"32":{"name":"(anonymous_32)","line":497,"loc":{"start":{"line":497,"column":47},"end":{"line":497,"column":80}}},"33":{"name":"(anonymous_33)","line":511,"loc":{"start":{"line":511,"column":46},"end":{"line":511,"column":66}}},"34":{"name":"(anonymous_34)","line":526,"loc":{"start":{"line":526,"column":45},"end":{"line":526,"column":71}}},"35":{"name":"(anonymous_35)","line":556,"loc":{"start":{"line":556,"column":47},"end":{"line":556,"column":72}}},"36":{"name":"(anonymous_36)","line":585,"loc":{"start":{"line":585,"column":46},"end":{"line":585,"column":71}}},"37":{"name":"(anonymous_37)","line":604,"loc":{"start":{"line":604,"column":45},"end":{"line":604,"column":71}}},"38":{"name":"(anonymous_38)","line":643,"loc":{"start":{"line":643,"column":47},"end":{"line":643,"column":67}}},"39":{"name":"(anonymous_39)","line":709,"loc":{"start":{"line":709,"column":37},"end":{"line":709,"column":64}}},"40":{"name":"(anonymous_40)","line":714,"loc":{"start":{"line":714,"column":23},"end":{"line":714,"column":40}}},"41":{"name":"(anonymous_41)","line":765,"loc":{"start":{"line":765,"column":42},"end":{"line":765,"column":82}}},"42":{"name":"(anonymous_42)","line":767,"loc":{"start":{"line":767,"column":28},"end":{"line":767,"column":41}}},"43":{"name":"(anonymous_43)","line":783,"loc":{"start":{"line":783,"column":31},"end":{"line":783,"column":57}}},"44":{"name":"(anonymous_44)","line":795,"loc":{"start":{"line":795,"column":50},"end":{"line":795,"column":65}}},"45":{"name":"(anonymous_45)","line":810,"loc":{"start":{"line":810,"column":34},"end":{"line":810,"column":60}}},"46":{"name":"(anonymous_46)","line":838,"loc":{"start":{"line":838,"column":30},"end":{"line":838,"column":49}}},"47":{"name":"(anonymous_47)","line":846,"loc":{"start":{"line":846,"column":35},"end":{"line":846,"column":47}}},"48":{"name":"(anonymous_48)","line":857,"loc":{"start":{"line":857,"column":38},"end":{"line":857,"column":64}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":4,"column":1}},"2":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"3":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"4":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":29}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":35}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":31}},"10":{"start":{"line":10,"column":0},"end":{"line":10,"column":37}},"11":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"12":{"start":{"line":12,"column":0},"end":{"line":16,"column":3}},"13":{"start":{"line":17,"column":0},"end":{"line":23,"column":3}},"14":{"start":{"line":24,"column":0},"end":{"line":24,"column":31}},"15":{"start":{"line":25,"column":0},"end":{"line":25,"column":37}},"16":{"start":{"line":26,"column":0},"end":{"line":26,"column":40}},"17":{"start":{"line":27,"column":0},"end":{"line":27,"column":40}},"18":{"start":{"line":28,"column":0},"end":{"line":28,"column":28}},"19":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"20":{"start":{"line":30,"column":0},"end":{"line":30,"column":42}},"21":{"start":{"line":31,"column":0},"end":{"line":31,"column":37}},"22":{"start":{"line":32,"column":0},"end":{"line":32,"column":44}},"23":{"start":{"line":36,"column":0},"end":{"line":51,"column":1}},"24":{"start":{"line":37,"column":4},"end":{"line":37,"column":33}},"25":{"start":{"line":38,"column":4},"end":{"line":42,"column":6}},"26":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"27":{"start":{"line":44,"column":8},"end":{"line":44,"column":88}},"28":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"29":{"start":{"line":47,"column":8},"end":{"line":47,"column":52}},"30":{"start":{"line":49,"column":4},"end":{"line":49,"column":19}},"31":{"start":{"line":50,"column":4},"end":{"line":50,"column":11}},"32":{"start":{"line":56,"column":0},"end":{"line":69,"column":1}},"33":{"start":{"line":57,"column":4},"end":{"line":57,"column":18}},"34":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"35":{"start":{"line":59,"column":8},"end":{"line":59,"column":37}},"36":{"start":{"line":61,"column":4},"end":{"line":67,"column":7}},"37":{"start":{"line":62,"column":8},"end":{"line":66,"column":11}},"38":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"39":{"start":{"line":64,"column":16},"end":{"line":64,"column":39}},"40":{"start":{"line":68,"column":4},"end":{"line":68,"column":18}},"41":{"start":{"line":114,"column":0},"end":{"line":869,"column":5}},"42":{"start":{"line":180,"column":4},"end":{"line":229,"column":5}},"43":{"start":{"line":181,"column":8},"end":{"line":181,"column":25}},"44":{"start":{"line":186,"column":8},"end":{"line":186,"column":42}},"45":{"start":{"line":188,"column":8},"end":{"line":193,"column":9}},"46":{"start":{"line":189,"column":12},"end":{"line":189,"column":47}},"47":{"start":{"line":191,"column":13},"end":{"line":193,"column":9}},"48":{"start":{"line":192,"column":12},"end":{"line":192,"column":34}},"49":{"start":{"line":194,"column":8},"end":{"line":203,"column":9}},"50":{"start":{"line":195,"column":12},"end":{"line":202,"column":14}},"51":{"start":{"line":204,"column":8},"end":{"line":204,"column":31}},"52":{"start":{"line":205,"column":8},"end":{"line":212,"column":11}},"53":{"start":{"line":206,"column":12},"end":{"line":211,"column":28}},"54":{"start":{"line":213,"column":8},"end":{"line":213,"column":51}},"55":{"start":{"line":214,"column":8},"end":{"line":214,"column":58}},"56":{"start":{"line":215,"column":8},"end":{"line":217,"column":11}},"57":{"start":{"line":216,"column":12},"end":{"line":216,"column":98}},"58":{"start":{"line":218,"column":8},"end":{"line":228,"column":11}},"59":{"start":{"line":219,"column":12},"end":{"line":219,"column":81}},"60":{"start":{"line":220,"column":12},"end":{"line":223,"column":13}},"61":{"start":{"line":221,"column":16},"end":{"line":222,"column":60}},"62":{"start":{"line":224,"column":12},"end":{"line":226,"column":13}},"63":{"start":{"line":225,"column":16},"end":{"line":225,"column":55}},"64":{"start":{"line":227,"column":12},"end":{"line":227,"column":79}},"65":{"start":{"line":237,"column":4},"end":{"line":241,"column":6}},"66":{"start":{"line":238,"column":8},"end":{"line":240,"column":51}},"67":{"start":{"line":249,"column":4},"end":{"line":253,"column":6}},"68":{"start":{"line":250,"column":8},"end":{"line":252,"column":51}},"69":{"start":{"line":261,"column":4},"end":{"line":264,"column":6}},"70":{"start":{"line":262,"column":8},"end":{"line":263,"column":110}},"71":{"start":{"line":263,"column":35},"end":{"line":263,"column":106}},"72":{"start":{"line":263,"column":88},"end":{"line":263,"column":102}},"73":{"start":{"line":274,"column":4},"end":{"line":280,"column":6}},"74":{"start":{"line":275,"column":8},"end":{"line":275,"column":65}},"75":{"start":{"line":275,"column":35},"end":{"line":275,"column":63}},"76":{"start":{"line":276,"column":8},"end":{"line":279,"column":109}},"77":{"start":{"line":279,"column":34},"end":{"line":279,"column":105}},"78":{"start":{"line":279,"column":87},"end":{"line":279,"column":101}},"79":{"start":{"line":302,"column":4},"end":{"line":313,"column":6}},"80":{"start":{"line":303,"column":8},"end":{"line":303,"column":49}},"81":{"start":{"line":303,"column":34},"end":{"line":303,"column":47}},"82":{"start":{"line":304,"column":8},"end":{"line":304,"column":119}},"83":{"start":{"line":305,"column":8},"end":{"line":305,"column":34}},"84":{"start":{"line":306,"column":8},"end":{"line":308,"column":9}},"85":{"start":{"line":307,"column":12},"end":{"line":307,"column":67}},"86":{"start":{"line":309,"column":8},"end":{"line":312,"column":108}},"87":{"start":{"line":312,"column":34},"end":{"line":312,"column":104}},"88":{"start":{"line":312,"column":87},"end":{"line":312,"column":100}},"89":{"start":{"line":323,"column":4},"end":{"line":329,"column":6}},"90":{"start":{"line":324,"column":8},"end":{"line":324,"column":65}},"91":{"start":{"line":324,"column":35},"end":{"line":324,"column":63}},"92":{"start":{"line":325,"column":8},"end":{"line":328,"column":51}},"93":{"start":{"line":354,"column":4},"end":{"line":364,"column":6}},"94":{"start":{"line":355,"column":8},"end":{"line":355,"column":77}},"95":{"start":{"line":356,"column":8},"end":{"line":356,"column":30}},"96":{"start":{"line":357,"column":8},"end":{"line":359,"column":9}},"97":{"start":{"line":358,"column":12},"end":{"line":358,"column":56}},"98":{"start":{"line":360,"column":8},"end":{"line":362,"column":9}},"99":{"start":{"line":361,"column":12},"end":{"line":361,"column":51}},"100":{"start":{"line":363,"column":8},"end":{"line":363,"column":106}},"101":{"start":{"line":379,"column":4},"end":{"line":381,"column":6}},"102":{"start":{"line":380,"column":8},"end":{"line":380,"column":98}},"103":{"start":{"line":395,"column":4},"end":{"line":402,"column":6}},"104":{"start":{"line":396,"column":8},"end":{"line":396,"column":48}},"105":{"start":{"line":396,"column":32},"end":{"line":396,"column":46}},"106":{"start":{"line":397,"column":8},"end":{"line":401,"column":51}},"107":{"start":{"line":411,"column":4},"end":{"line":416,"column":6}},"108":{"start":{"line":412,"column":8},"end":{"line":415,"column":51}},"109":{"start":{"line":426,"column":4},"end":{"line":432,"column":6}},"110":{"start":{"line":427,"column":8},"end":{"line":427,"column":65}},"111":{"start":{"line":427,"column":35},"end":{"line":427,"column":63}},"112":{"start":{"line":428,"column":8},"end":{"line":431,"column":51}},"113":{"start":{"line":442,"column":4},"end":{"line":448,"column":6}},"114":{"start":{"line":443,"column":8},"end":{"line":443,"column":65}},"115":{"start":{"line":443,"column":35},"end":{"line":443,"column":63}},"116":{"start":{"line":444,"column":8},"end":{"line":447,"column":51}},"117":{"start":{"line":456,"column":4},"end":{"line":460,"column":6}},"118":{"start":{"line":457,"column":8},"end":{"line":459,"column":51}},"119":{"start":{"line":468,"column":4},"end":{"line":472,"column":6}},"120":{"start":{"line":469,"column":8},"end":{"line":471,"column":51}},"121":{"start":{"line":480,"column":4},"end":{"line":484,"column":6}},"122":{"start":{"line":481,"column":8},"end":{"line":483,"column":51}},"123":{"start":{"line":497,"column":4},"end":{"line":503,"column":6}},"124":{"start":{"line":498,"column":8},"end":{"line":498,"column":65}},"125":{"start":{"line":498,"column":35},"end":{"line":498,"column":63}},"126":{"start":{"line":499,"column":8},"end":{"line":502,"column":51}},"127":{"start":{"line":511,"column":4},"end":{"line":517,"column":6}},"128":{"start":{"line":512,"column":8},"end":{"line":512,"column":65}},"129":{"start":{"line":512,"column":35},"end":{"line":512,"column":63}},"130":{"start":{"line":513,"column":8},"end":{"line":516,"column":40}},"131":{"start":{"line":526,"column":4},"end":{"line":532,"column":6}},"132":{"start":{"line":527,"column":8},"end":{"line":527,"column":65}},"133":{"start":{"line":527,"column":35},"end":{"line":527,"column":63}},"134":{"start":{"line":528,"column":8},"end":{"line":531,"column":51}},"135":{"start":{"line":556,"column":4},"end":{"line":562,"column":6}},"136":{"start":{"line":557,"column":8},"end":{"line":560,"column":52}},"137":{"start":{"line":561,"column":8},"end":{"line":561,"column":98}},"138":{"start":{"line":585,"column":4},"end":{"line":591,"column":6}},"139":{"start":{"line":586,"column":8},"end":{"line":589,"column":52}},"140":{"start":{"line":590,"column":8},"end":{"line":590,"column":98}},"141":{"start":{"line":604,"column":4},"end":{"line":610,"column":6}},"142":{"start":{"line":605,"column":8},"end":{"line":605,"column":65}},"143":{"start":{"line":605,"column":35},"end":{"line":605,"column":63}},"144":{"start":{"line":606,"column":8},"end":{"line":609,"column":51}},"145":{"start":{"line":643,"column":4},"end":{"line":648,"column":6}},"146":{"start":{"line":644,"column":8},"end":{"line":644,"column":65}},"147":{"start":{"line":644,"column":35},"end":{"line":644,"column":63}},"148":{"start":{"line":645,"column":8},"end":{"line":647,"column":47}},"149":{"start":{"line":709,"column":4},"end":{"line":748,"column":6}},"150":{"start":{"line":710,"column":8},"end":{"line":710,"column":25}},"151":{"start":{"line":711,"column":8},"end":{"line":711,"column":49}},"152":{"start":{"line":711,"column":34},"end":{"line":711,"column":47}},"153":{"start":{"line":712,"column":8},"end":{"line":712,"column":189}},"154":{"start":{"line":713,"column":8},"end":{"line":713,"column":25}},"155":{"start":{"line":714,"column":8},"end":{"line":735,"column":11}},"156":{"start":{"line":715,"column":12},"end":{"line":715,"column":179}},"157":{"start":{"line":716,"column":12},"end":{"line":716,"column":87}},"158":{"start":{"line":717,"column":12},"end":{"line":717,"column":98}},"159":{"start":{"line":718,"column":12},"end":{"line":718,"column":80}},"160":{"start":{"line":719,"column":12},"end":{"line":719,"column":70}},"161":{"start":{"line":720,"column":12},"end":{"line":725,"column":13}},"162":{"start":{"line":721,"column":16},"end":{"line":724,"column":61}},"163":{"start":{"line":726,"column":12},"end":{"line":731,"column":13}},"164":{"start":{"line":727,"column":16},"end":{"line":730,"column":40}},"165":{"start":{"line":732,"column":12},"end":{"line":734,"column":13}},"166":{"start":{"line":733,"column":16},"end":{"line":733,"column":77}},"167":{"start":{"line":736,"column":8},"end":{"line":747,"column":11}},"168":{"start":{"line":765,"column":4},"end":{"line":769,"column":6}},"169":{"start":{"line":766,"column":8},"end":{"line":766,"column":49}},"170":{"start":{"line":766,"column":34},"end":{"line":766,"column":47}},"171":{"start":{"line":767,"column":8},"end":{"line":767,"column":101}},"172":{"start":{"line":767,"column":43},"end":{"line":767,"column":97}},"173":{"start":{"line":768,"column":8},"end":{"line":768,"column":49}},"174":{"start":{"line":783,"column":4},"end":{"line":796,"column":6}},"175":{"start":{"line":784,"column":8},"end":{"line":784,"column":49}},"176":{"start":{"line":784,"column":34},"end":{"line":784,"column":47}},"177":{"start":{"line":785,"column":8},"end":{"line":787,"column":9}},"178":{"start":{"line":786,"column":12},"end":{"line":786,"column":36}},"179":{"start":{"line":791,"column":8},"end":{"line":794,"column":9}},"180":{"start":{"line":792,"column":12},"end":{"line":792,"column":49}},"181":{"start":{"line":793,"column":12},"end":{"line":793,"column":37}},"182":{"start":{"line":795,"column":8},"end":{"line":795,"column":118}},"183":{"start":{"line":795,"column":67},"end":{"line":795,"column":114}},"184":{"start":{"line":810,"column":4},"end":{"line":822,"column":6}},"185":{"start":{"line":811,"column":8},"end":{"line":811,"column":49}},"186":{"start":{"line":811,"column":34},"end":{"line":811,"column":47}},"187":{"start":{"line":812,"column":8},"end":{"line":812,"column":127}},"188":{"start":{"line":813,"column":8},"end":{"line":815,"column":9}},"189":{"start":{"line":814,"column":12},"end":{"line":814,"column":36}},"190":{"start":{"line":816,"column":8},"end":{"line":821,"column":12}},"191":{"start":{"line":838,"column":4},"end":{"line":840,"column":6}},"192":{"start":{"line":839,"column":8},"end":{"line":839,"column":39}},"193":{"start":{"line":846,"column":4},"end":{"line":852,"column":6}},"194":{"start":{"line":847,"column":8},"end":{"line":850,"column":9}},"195":{"start":{"line":848,"column":12},"end":{"line":849,"column":75}},"196":{"start":{"line":851,"column":8},"end":{"line":851,"column":37}},"197":{"start":{"line":857,"column":4},"end":{"line":867,"column":6}},"198":{"start":{"line":858,"column":8},"end":{"line":858,"column":50}},"199":{"start":{"line":858,"column":33},"end":{"line":858,"column":48}},"200":{"start":{"line":859,"column":8},"end":{"line":866,"column":10}},"201":{"start":{"line":868,"column":4},"end":{"line":868,"column":20}},"202":{"start":{"line":870,"column":0},"end":{"line":870,"column":28}}},"branchMap":{"1":{"line":3,"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":21}},{"start":{"line":3,"column":21},"end":{"line":3,"column":21}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":12}},{"start":{"line":63,"column":12},"end":{"line":63,"column":12}}]},"5":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":188,"column":8}},{"start":{"line":188,"column":8},"end":{"line":188,"column":8}}]},"6":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":13},"end":{"line":191,"column":13}},{"start":{"line":191,"column":13},"end":{"line":191,"column":13}}]},"7":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":8},"end":{"line":194,"column":8}},{"start":{"line":194,"column":8},"end":{"line":194,"column":8}}]},"8":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":39},"end":{"line":219,"column":54}},{"start":{"line":219,"column":58},"end":{"line":219,"column":80}}]},"9":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":12},"end":{"line":220,"column":12}},{"start":{"line":220,"column":12},"end":{"line":220,"column":12}}]},"10":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":12},"end":{"line":224,"column":12}},{"start":{"line":224,"column":12},"end":{"line":224,"column":12}}]},"11":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":8},"end":{"line":275,"column":8}},{"start":{"line":275,"column":8},"end":{"line":275,"column":8}}]},"12":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":8},"end":{"line":303,"column":8}},{"start":{"line":303,"column":8},"end":{"line":303,"column":8}}]},"13":{"line":304,"type":"cond-expr","locations":[{"start":{"line":304,"column":62},"end":{"line":304,"column":78}},{"start":{"line":304,"column":81},"end":{"line":304,"column":83}}]},"14":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8}},{"start":{"line":306,"column":8},"end":{"line":306,"column":8}}]},"15":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":8},"end":{"line":324,"column":8}},{"start":{"line":324,"column":8},"end":{"line":324,"column":8}}]},"16":{"line":355,"type":"cond-expr","locations":[{"start":{"line":355,"column":41},"end":{"line":355,"column":57}},{"start":{"line":355,"column":60},"end":{"line":355,"column":76}}]},"17":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":8},"end":{"line":357,"column":8}},{"start":{"line":357,"column":8},"end":{"line":357,"column":8}}]},"18":{"line":360,"type":"if","locations":[{"start":{"line":360,"column":8},"end":{"line":360,"column":8}},{"start":{"line":360,"column":8},"end":{"line":360,"column":8}}]},"19":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":8},"end":{"line":396,"column":8}},{"start":{"line":396,"column":8},"end":{"line":396,"column":8}}]},"20":{"line":400,"type":"cond-expr","locations":[{"start":{"line":400,"column":27},"end":{"line":400,"column":49}},{"start":{"line":400,"column":52},"end":{"line":400,"column":54}}]},"21":{"line":427,"type":"if","locations":[{"start":{"line":427,"column":8},"end":{"line":427,"column":8}},{"start":{"line":427,"column":8},"end":{"line":427,"column":8}}]},"22":{"line":443,"type":"if","locations":[{"start":{"line":443,"column":8},"end":{"line":443,"column":8}},{"start":{"line":443,"column":8},"end":{"line":443,"column":8}}]},"23":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":8},"end":{"line":498,"column":8}},{"start":{"line":498,"column":8},"end":{"line":498,"column":8}}]},"24":{"line":512,"type":"if","locations":[{"start":{"line":512,"column":8},"end":{"line":512,"column":8}},{"start":{"line":512,"column":8},"end":{"line":512,"column":8}}]},"25":{"line":527,"type":"if","locations":[{"start":{"line":527,"column":8},"end":{"line":527,"column":8}},{"start":{"line":527,"column":8},"end":{"line":527,"column":8}}]},"26":{"line":558,"type":"binary-expr","locations":[{"start":{"line":558,"column":36},"end":{"line":558,"column":52}},{"start":{"line":558,"column":56},"end":{"line":558,"column":72}}]},"27":{"line":560,"type":"cond-expr","locations":[{"start":{"line":560,"column":35},"end":{"line":560,"column":45}},{"start":{"line":560,"column":48},"end":{"line":560,"column":50}}]},"28":{"line":587,"type":"binary-expr","locations":[{"start":{"line":587,"column":36},"end":{"line":587,"column":52}},{"start":{"line":587,"column":56},"end":{"line":587,"column":72}}]},"29":{"line":589,"type":"cond-expr","locations":[{"start":{"line":589,"column":35},"end":{"line":589,"column":45}},{"start":{"line":589,"column":48},"end":{"line":589,"column":50}}]},"30":{"line":605,"type":"if","locations":[{"start":{"line":605,"column":8},"end":{"line":605,"column":8}},{"start":{"line":605,"column":8},"end":{"line":605,"column":8}}]},"31":{"line":644,"type":"if","locations":[{"start":{"line":644,"column":8},"end":{"line":644,"column":8}},{"start":{"line":644,"column":8},"end":{"line":644,"column":8}}]},"32":{"line":711,"type":"if","locations":[{"start":{"line":711,"column":8},"end":{"line":711,"column":8}},{"start":{"line":711,"column":8},"end":{"line":711,"column":8}}]},"33":{"line":712,"type":"cond-expr","locations":[{"start":{"line":712,"column":62},"end":{"line":712,"column":78}},{"start":{"line":712,"column":81},"end":{"line":712,"column":83}}]},"34":{"line":712,"type":"cond-expr","locations":[{"start":{"line":712,"column":137},"end":{"line":712,"column":140}},{"start":{"line":712,"column":143},"end":{"line":712,"column":145}}]},"35":{"line":715,"type":"cond-expr","locations":[{"start":{"line":715,"column":60},"end":{"line":715,"column":62}},{"start":{"line":715,"column":65},"end":{"line":715,"column":67}}]},"36":{"line":715,"type":"cond-expr","locations":[{"start":{"line":715,"column":109},"end":{"line":715,"column":111}},{"start":{"line":715,"column":114},"end":{"line":715,"column":116}}]},"37":{"line":716,"type":"binary-expr","locations":[{"start":{"line":716,"column":25},"end":{"line":716,"column":47}},{"start":{"line":716,"column":51},"end":{"line":716,"column":86}}]},"38":{"line":717,"type":"cond-expr","locations":[{"start":{"line":717,"column":39},"end":{"line":717,"column":66}},{"start":{"line":717,"column":69},"end":{"line":717,"column":97}}]},"39":{"line":718,"type":"cond-expr","locations":[{"start":{"line":718,"column":37},"end":{"line":718,"column":59}},{"start":{"line":718,"column":62},"end":{"line":718,"column":79}}]},"40":{"line":719,"type":"cond-expr","locations":[{"start":{"line":719,"column":45},"end":{"line":719,"column":49}},{"start":{"line":719,"column":52},"end":{"line":719,"column":54}}]},"41":{"line":727,"type":"cond-expr","locations":[{"start":{"line":727,"column":38},"end":{"line":727,"column":41}},{"start":{"line":727,"column":44},"end":{"line":727,"column":47}}]},"42":{"line":732,"type":"if","locations":[{"start":{"line":732,"column":12},"end":{"line":732,"column":12}},{"start":{"line":732,"column":12},"end":{"line":732,"column":12}}]},"43":{"line":766,"type":"if","locations":[{"start":{"line":766,"column":8},"end":{"line":766,"column":8}},{"start":{"line":766,"column":8},"end":{"line":766,"column":8}}]},"44":{"line":784,"type":"if","locations":[{"start":{"line":784,"column":8},"end":{"line":784,"column":8}},{"start":{"line":784,"column":8},"end":{"line":784,"column":8}}]},"45":{"line":785,"type":"if","locations":[{"start":{"line":785,"column":8},"end":{"line":785,"column":8}},{"start":{"line":785,"column":8},"end":{"line":785,"column":8}}]},"46":{"line":791,"type":"if","locations":[{"start":{"line":791,"column":8},"end":{"line":791,"column":8}},{"start":{"line":791,"column":8},"end":{"line":791,"column":8}}]},"47":{"line":811,"type":"if","locations":[{"start":{"line":811,"column":8},"end":{"line":811,"column":8}},{"start":{"line":811,"column":8},"end":{"line":811,"column":8}}]},"48":{"line":812,"type":"cond-expr","locations":[{"start":{"line":812,"column":62},"end":{"line":812,"column":78}},{"start":{"line":812,"column":81},"end":{"line":812,"column":83}}]},"49":{"line":813,"type":"if","locations":[{"start":{"line":813,"column":8},"end":{"line":813,"column":8}},{"start":{"line":813,"column":8},"end":{"line":813,"column":8}}]},"50":{"line":847,"type":"if","locations":[{"start":{"line":847,"column":8},"end":{"line":847,"column":8}},{"start":{"line":847,"column":8},"end":{"line":847,"column":8}}]},"51":{"line":858,"type":"if","locations":[{"start":{"line":858,"column":8},"end":{"line":858,"column":8}},{"start":{"line":858,"column":8},"end":{"line":858,"column":8}}]}},"code":["\"use strict\";","function __export(m) {","    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];","}","Object.defineProperty(exports, \"__esModule\", { value: true });","var url = require(\"url\");","var b = require(\"./builder\");","var grammar = require(\"./grammar\");","var pool_1 = require(\"./pool\");","var results_1 = require(\"./results\");","var schema_1 = require(\"./schema\");","var defaultHost = Object.freeze({","    host: '127.0.0.1',","    port: 8086,","    protocol: 'http',","});","var defaultOptions = Object.freeze({","    database: null,","    hosts: [],","    password: 'root',","    schema: [],","    username: 'root',","});","__export(require(\"./builder\"));","var grammar_1 = require(\"./grammar\");","exports.FieldType = grammar_1.FieldType;","exports.Precision = grammar_1.Precision;","exports.Raw = grammar_1.Raw;","exports.escape = grammar_1.escape;","exports.toNanoDate = grammar_1.toNanoDate;","var results_2 = require(\"./results\");","exports.ResultError = results_2.ResultError;","/**"," * Parses the URL out into into a IClusterConfig object"," */","function parseOptionsUrl(addr) {","    var parsed = url.parse(addr);","    var options = {","        host: parsed.hostname,","        port: Number(parsed.port),","        protocol: parsed.protocol.slice(0, -1),","    };","    if (parsed.auth) {","        _a = parsed.auth.split(':'), options.username = _a[0], options.password = _a[1];","    }","    if (parsed.pathname.length > 1) {","        options.database = parsed.pathname.slice(1);","    }","    return options;","    var _a;","}","/**"," * Works similarly to Object.assign, but only overwrites"," * properties that resolve to undefined."," */","function defaults(target) {","    var srcs = [];","    for (var _i = 1; _i < arguments.length; _i++) {","        srcs[_i - 1] = arguments[_i];","    }","    srcs.forEach(function (src) {","        Object.keys(src).forEach(function (key) {","            if (target[key] === undefined) {","                target[key] = src[key];","            }","        });","    });","    return target;","}","/**"," * InfluxDB is the public interface to run queries against the your database."," * This is a 'driver-level' module, not a a full-fleged ORM or ODM; you run"," * queries directly by calling methods on this class."," *"," * Please check out some of [the tutorials](https://node-influx.github.io/manual/tutorial.html)"," * if you want help getting started!"," *"," * @example"," * const Influx = require('influx');"," * const influx = new Influx.InfluxDB({"," *  host: 'localhost',"," *  database: 'express_response_db',"," *  schema: ["," *    {"," *      measurement: 'response_times',"," *      fields: {"," *        path: Influx.FieldType.STRING,"," *        duration: Influx.FieldType.INTEGER"," *      },"," *      tags: ["," *        'host'"," *      ]"," *    }"," *  ]"," * })"," *"," * influx.writePoints(["," *   {"," *     measurement: 'response_times',"," *     tags: { host: os.hostname() },"," *     fields: { duration, path: req.path },"," *   }"," * ]).then(() => {"," *   return influx.query(`"," *     select * from response_times"," *     where host = ${Influx.escape.stringLit(os.hostname())}"," *     order by time desc"," *     limit 10"," *   `)"," * }).then(rows => {"," *   rows.forEach(row => console.log(`A request to ${row.path} took ${row.duration}ms`))"," * })"," */","var InfluxDB = (function () {","    /**","     * Connect to a single InfluxDB instance by specifying","     * a set of connection options.","     * @param {IClusterConfig|ISingleHostConfig|string} [options='http://root:root@127.0.0.1:8086']","     *","     * @example","     * const Influx = require('influx')","     *","     * // Connect to a single host with a DSN:","     * const influx = new Influx.InfluxDB('http://user:password@host:8086/database')","     *","     * @example","     * const Influx = require('influx')","     *","     * // Connect to a single host with a full set of config details and","     * // a custom schema","     * const client = new Influx.InfluxDB({","     *   database: 'my_db',","     *   host: 'localhost',","     *   port: 8086,","     *   username: 'connor',","     *   password: 'pa$$w0rd',","     *   schema: [","     *     {","     *       measurement: 'perf',","     *       fields: {","     *         memory_usage: Influx.FieldType.INTEGER,","     *         cpu_usage: Influx.FieldType.FLOAT,","     *         is_online: Influx.FieldType.BOOLEAN","     *       }","     *       tags: [","     *         'hostname'","     *       ]","     *     }","     *   ]","     * })","     *","     * @example","     * const Influx = require('influx')","     *","     * // Use a pool of several host connections and balance queries across them:","     * const client = new Influx.InfluxDB({","     *   database: 'my_db',","     *   username: 'connor',","     *   password: 'pa$$w0rd',","     *   hosts: [","     *     { host: 'db1.example.com' },","     *     { host: 'db2.example.com' },","     *   ],","     *   schema: [","     *     {","     *       measurement: 'perf',","     *       fields: {","     *         memory_usage: Influx.FieldType.INTEGER,","     *         cpu_usage: Influx.FieldType.FLOAT,","     *         is_online: Influx.FieldType.BOOLEAN","     *       }","     *       tags: [","     *         'hostname'","     *       ]","     *     }","     *   ]","     * })","     *","     */","    function InfluxDB(options) {","        var _this = this;","        /**","         * Map of Schema instances defining measurements in Influx.","         * @private","         */","        this.schema = Object.create(null);","        // Figure out how to parse whatever we were passed in into a IClusterConfig.","        if (typeof options === 'string') {","            options = parseOptionsUrl(options);","        }","        else if (!options) {","            options = defaultHost;","        }","        if (!options.hasOwnProperty('hosts')) {","            options = {","                database: options.database,","                hosts: [options],","                password: options.password,","                pool: options.pool,","                schema: options.schema,","                username: options.username,","            };","        }","        var resolved = options;","        resolved.hosts = resolved.hosts.map(function (host) {","            return defaults({","                host: host.host,","                port: host.port,","                protocol: host.protocol,","                options: host.options,","            }, defaultHost);","        });","        this.pool = new pool_1.Pool(resolved.pool);","        this.options = defaults(resolved, defaultOptions);","        resolved.hosts.forEach(function (host) {","            _this.pool.addHost(host.protocol + \"://\" + host.host + \":\" + host.port, host.options);","        });","        this.options.schema.forEach(function (schema) {","            var db = schema.database = schema.database || _this.options.database;","            if (!db) {","                throw new Error(\"Schema \" + schema.measurement + \" doesn't have a database specified,\" +","                    'and no default database is provided!');","            }","            if (!_this.schema[db]) {","                _this.schema[db] = Object.create(null);","            }","            _this.schema[db][schema.measurement] = new schema_1.Schema(schema);","        });","    }","    /**","     * Creates a new database with the provided name.","     * @param {string} databaseName","     * @return {Promise.<void>}","     * @example","     * influx.createDatabase('mydb')","     */","    InfluxDB.prototype.createDatabase = function (databaseName) {","        return this.pool.json(this.getQueryOpts({","            q: \"create database \" + grammar.escape.quoted(databaseName),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Deletes a database with the provided name.","     * @param {string} databaseName","     * @return {Promise.<void>}","     * @example","     * influx.createDatabase('mydb')","     */","    InfluxDB.prototype.dropDatabase = function (databaseName) {","        return this.pool.json(this.getQueryOpts({","            q: \"drop database \" + grammar.escape.quoted(databaseName),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Returns array of database names. Requires cluster admin privileges.","     * @returns {Promise<String[]>} a list of database names","     * @example","     * influx.getMeasurements().then(names =>","     *   console.log('My database names are: ' + names.join(', ')));","     */","    InfluxDB.prototype.getDatabaseNames = function () {","        return this.pool.json(this.getQueryOpts({ q: 'show databases' }))","            .then(function (res) { return results_1.parseSingle(res).map(function (r) { return r.name; }); });","    };","    /**","     * Returns array of measurements.","     * @returns {Promise<String[]>} a list of measurement names","     * @param {String} [database] the database the measurement lives in, optional","     *     if a default database is provided.","     * @example","     * influx.getMeasurements().then(names =>","     *   console.log('My measurement names are: ' + names.join(', ')));","     */","    InfluxDB.prototype.getMeasurements = function (database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            db: database,","            q: 'show measurements',","        })).then(function (res) { return results_1.parseSingle(res).map(function (r) { return r.name; }); });","    };","    /**","     * Returns a list of all series within the target measurement, or from the","     * entire database if a measurement isn't provided.","     * @param {Object} [options]","     * @param {String} [options.measurement] if provided, we'll only get series","     *     from within that measurement.","     * @param {String} [options.database] the database the series lives in,","     *     optional if a default database is provided.","     * @returns {Promise<String[]>} a list of series names","     * @example","     * influx.getSeries().then(names => {","     *   console.log('My series names in my_measurement are: ' + names.join(', '))","     * })","     *","     * influx.getSeries({","     *   measurement: 'my_measurement',","     *   database: 'my_db'","     * }).then(names => {","     *   console.log('My series names in my_measurement are: ' + names.join(', '))","     * })","     */","    InfluxDB.prototype.getSeries = function (options) {","        if (options === void 0) { options = {}; }","        var _a = options.database, database = _a === void 0 ? this.defaultDB() : _a, measurement = options.measurement;","        var query = 'show series';","        if (measurement) {","            query += \" from \" + grammar.escape.quoted(measurement);","        }","        return this.pool.json(this.getQueryOpts({","            db: database,","            q: query,","        })).then(function (res) { return results_1.parseSingle(res).map(function (r) { return r.key; }); });","    };","    /**","     * Removes a measurement from the database.","     * @param {String} measurement","     * @param {String} [database] the database the measurement lives in, optional","     *     if a default database is provided.","     * @return {Promise.<void>}","     * @example","     * influx.dropMeasurement('my_measurement')","     */","    InfluxDB.prototype.dropMeasurement = function (measurement, database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            db: database,","            q: \"drop measurement \" + grammar.escape.quoted(measurement),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Removes a one or more series from InfluxDB.","     *","     * @returns {Promise<void>}","     * @example","     * // The following pairs of queries are equivalent: you can chose either to","     * // use our builder or pass in string directly. The builder takes care","     * // of escaping and most syntax handling for you.","     *","     * influx.dropSeries({ where: e => e.tag('cpu').equals.value('cpu8') })","     * influx.dropSeries({ where: '\"cpu\" = \\'cpu8\\'' })","     * // DROP SERIES WHERE \"cpu\" = 'cpu8'","     *","     * influx.dropSeries({ measurement: m => m.name('cpu').policy('autogen') })","     * influx.dropSeries({ measurement: '\"cpu\".\"autogen\"' })","     * // DROP SERIES FROM \"autogen\".\"cpu\"","     *","     * influx.dropSeries({","     *   measurement: m => m.name('cpu').policy('autogen'),","     *   where: e => e.tag('cpu').equals.value('cpu8'),","     *   database: 'my_db'","     * })","     * // DROP SERIES FROM \"autogen\".\"cpu\" WHERE \"cpu\" = 'cpu8'","     */","    InfluxDB.prototype.dropSeries = function (options) {","        var db = 'database' in options ? options.database : this.defaultDB();","        var q = 'drop series';","        if ('measurement' in options) {","            q += ' from ' + b.parseMeasurement(options);","        }","        if ('where' in options) {","            q += ' where ' + b.parseWhere(options);","        }","        return this.pool.json(this.getQueryOpts({ db: db, q: q }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Returns a list of users on the Influx database.","     * @return {Promise<Array<{ user: String, admin: Boolean }>>}","     * @example","     * influx.getUsers().then(users => {","     *   users.forEach(user => {","     *     if (user.admin) {","     *       console.log(user.user, 'is an admin!')","     *     } else {","     *       console.log(user.user, 'is not an admin!')","     *     }","     *   })","     * })","     */","    InfluxDB.prototype.getUsers = function () {","        return this.pool.json(this.getQueryOpts({ q: 'show users' })).then(results_1.parseSingle);","    };","    /**","     * Creates a new InfluxDB user.","     * @param {String} username","     * @param {String} password","     * @param {Boolean} [admin=false] If true, the user will be given all","     *     privileges on all databases.","     * @return {Promise<void>}","     * @example","     * influx.createUser('connor', 'pa55w0rd', true) // make 'connor' an admin","     *","     * // make non-admins:","     * influx.createUser('not_admin', 'pa55w0rd')","     */","    InfluxDB.prototype.createUser = function (username, password, admin) {","        if (admin === void 0) { admin = false; }","        return this.pool.json(this.getQueryOpts({","            q: \"create user \" + grammar.escape.quoted(username) + \" with password \"","                + grammar.escape.stringLit(password)","                + (admin ? ' with all privileges' : ''),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Sets a password for an Influx user.","     * @param {String} username","     * @param {String} password","     * @return {Promise<void>}","     * @example","     * influx.setPassword('connor', 'pa55w0rd')","     */","    InfluxDB.prototype.setPassword = function (username, password) {","        return this.pool.json(this.getQueryOpts({","            q: \"set password for \" + grammar.escape.quoted(username) + \" = \"","                + grammar.escape.stringLit(password),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Grants a privilege to a specified user.","     * @param {String} username","     * @param {String} privilege Should be one of 'READ' or 'WRITE'","     * @param {String} [database] If not provided, uses the default database.","     * @return {Promise<void>}","     * @example","     * influx.grantPrivilege('connor', 'READ', 'my_db') // grants read access on my_db to connor","     */","    InfluxDB.prototype.grantPrivilege = function (username, privilege, database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            q: \"grant \" + privilege + \" on \" + grammar.escape.quoted(database) + \" \"","                + (\"to \" + grammar.escape.quoted(username)),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Removes a privilege from a specified user.","     * @param {String} username","     * @param {String} privilege Should be one of 'READ' or 'WRITE'","     * @param {String} [database] If not provided, uses the default database.","     * @return {Promise<void>}","     * @example","     * influx.revokePrivilege('connor', 'READ', 'my_db') // removes read access on my_db from connor","     */","    InfluxDB.prototype.revokePrivilege = function (username, privilege, database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            q: \"revoke \" + privilege + \" on \" + grammar.escape.quoted(database) + \" from \"","                + grammar.escape.quoted(username),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Grants admin privileges to a specified user.","     * @param {String} username","     * @return {Promise<void>}","     * @example","     * influx.grantAdminPrivilege('connor')","     */","    InfluxDB.prototype.grantAdminPrivilege = function (username) {","        return this.pool.json(this.getQueryOpts({","            q: \"grant all to \" + grammar.escape.quoted(username),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Removes a admin privilege from a specified user.","     * @param {String} username","     * @return {Promise<void>}","     * @example","     * influx.revokeAdminPrivilege('connor')","     */","    InfluxDB.prototype.revokeAdminPrivilege = function (username) {","        return this.pool.json(this.getQueryOpts({","            q: \"revoke all from \" + grammar.escape.quoted(username),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Removes a user from the database.","     * @param {String} username","     * @return {Promise<void>}","     * @example","     * influx.dropUser('connor')","     */","    InfluxDB.prototype.dropUser = function (username) {","        return this.pool.json(this.getQueryOpts({","            q: \"drop user \" + grammar.escape.quoted(username),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Creates a continuous query in a database","     * @param {String} name The query name, for later reference","     * @param {String} query The body of the query to run","     * @param {String} [database] If not provided, uses the default database.","     * @return {Promise<void>}","     * @example","     * influx.createContinuousQuery('downsample_cpu_1h', `","     *   SELECT MEAN(cpu) INTO \"7d\".\"perf\"","     *   FROM \"1d\".\"perf\" GROUP BY time(1m)","     * `)","     */","    InfluxDB.prototype.createContinuousQuery = function (name, query, database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            q: \"create continuous query \" + grammar.escape.quoted(name)","                + (\" on \" + grammar.escape.quoted(database) + \" begin \" + query + \" end\"),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Returns a list of continous queries in the database.","     * @param {String} [database] If not provided, uses the default database.","     * @return {Promise<void>}","     * @example","     * influx.showContinousQueries()","     */","    InfluxDB.prototype.showContinousQueries = function (database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            db: database,","            q: 'show continuous queries',","        })).then(results_1.parseSingle);","    };","    /**","     * Creates a continuous query in a database","     * @param {String} name The query name","     * @param {String} [database] If not provided, uses the default database.","     * @return {Promise<void>}","     * @example","     * influx.dropContinuousQuery('downsample_cpu_1h')","     */","    InfluxDB.prototype.dropContinuousQuery = function (name, database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            q: \"drop continuous query \" + grammar.escape.quoted(name)","                + (\" on \" + grammar.escape.quoted(database)),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Creates a new retention policy on a database. You can read more about","     * [Downsampling and Retention](https://docs.influxdata.com/influxdb/v1.0/","     * guides/downsampling_and_retention/) on the InfluxDB website.","     *","     * @param {String} name The retention policy name","     * @param {Object} options","     * @param {String} [options.database] Database to create the policy on,","     *     uses the default database if not provided.","     * @param {String} options.duration How long data in the retention policy","     *     should be stored for, should be in a format like `7d`. See details","     *     [here](https://docs.influxdata.com/influxdb/v1.0/query_language/spec/#durations)","     * @param {Number} options.replication How many servers data in the series","     *     should be replicated to.","     * @param {Boolean} [options.isDefault] Whether the retention policy should","     *     be the default policy on the database.","     * @return {Promise<void>}","     * @example","     * influx.createRetentionPolicy('7d', {","     *  duration: '7d',","     *  replication: 1","     * })","     */","    InfluxDB.prototype.createRetentionPolicy = function (name, options) {","        var q = \"create retention policy \" + grammar.escape.quoted(name) + \" on \"","            + grammar.escape.quoted(options.database || this.defaultDB())","            + (\" duration \" + options.duration + \" replication \" + options.replication)","            + (options.isDefault ? ' default' : '');","        return this.pool.json(this.getQueryOpts({ q: q }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Alters an existing retention policy on a database.","     *","     * @param {String} name The retention policy name","     * @param {Object} options","     * @param {String} [options.database] Database to create the policy on,","     *     uses the default database if not provided.","     * @param {String} options.duration How long data in the retention policy","     *     should be stored for, should be in a format like `7d`. See details","     *     [here](https://docs.influxdata.com/influxdb/v1.0/query_language/spec/#durations)","     * @param {Number} options.replication How many servers data in the series","     *     should be replicated to.","     * @param {Boolean} [options.default] Whether the retention policy should","     *     be the default policy on the database.","     * @return {Promise<void>}","     * @example","     * influx.alterRetentionPolicy('7d', {","     *  duration: '7d',","     *  replication: 1,","     *  default: true","     * })","     */","    InfluxDB.prototype.alterRetentionPolicy = function (name, options) {","        var q = \"alter retention policy \" + grammar.escape.quoted(name) + \" on \"","            + grammar.escape.quoted(options.database || this.defaultDB())","            + (\" duration \" + options.duration + \" replication \" + options.replication)","            + (options.isDefault ? ' default' : '');","        return this.pool.json(this.getQueryOpts({ q: q }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Deletes a retention policy and associated data. Note that the data will","     * not be immediately destroyed, and will hang around until Influx's","     * bi-hourly cron.","     *","     * @param {String} name The retention policy name","     * @param {String} [database] Database name that the policy lives in,","     *     uses the default database if not provided.","     * @return {Promise<void>}","     * @example","     * influx.dropRetentionPolicy('7d')","     */","    InfluxDB.prototype.dropRetentionPolicy = function (name, database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            q: \"drop retention policy \" + grammar.escape.quoted(name) + \" \"","                + (\"on \" + grammar.escape.quoted(database)),","        }, 'POST')).then(results_1.assertNoErrors);","    };","    /**","     * Shows retention policies on the database","     *","     * @param {String} [database] The database to list policies on, uses the","     *     default database if not provided.","     * @return {Promise<Array<{","     *     name: String,","     *     duration: String,","     *     shardGroupDuration: String,","     *     replicaN: Number,","     *     default: Boolean","     * }>>}","     * @example","     * influx.showRetentionPolicies().then(policies => {","     *   expect(policies.slice()).to.deep.equal([","     *     {","     *       name: 'autogen',","     *       duration: '0s',","     *       shardGroupDuration: '168h0m0s',","     *       replicaN: 1,","     *       default: true,","     *     },","     *     {","     *       name: '7d',","     *       duration: '168h0m0s',","     *       shardGroupDuration: '24h0m0s',","     *       replicaN: 1,","     *       default: false,","     *     },","     *   ])","     * })","     */","    InfluxDB.prototype.showRetentionPolicies = function (database) {","        if (database === void 0) { database = this.defaultDB(); }","        return this.pool.json(this.getQueryOpts({","            q: \"show retention policies on \" + grammar.escape.quoted(database),","        }, 'GET')).then(results_1.parseSingle);","    };","    /**","     * writePoints sends a list of points together in a batch to InfluxDB. In","     * each point you must specify the measurement name to write into as well","     * as a list of tag and field values. Optionally, you can specify the","     * time to tag that point at, defaulting to the current time.","     *","     * If you defined a schema for the measurement in the options you passed","     * to `new Influx(options)`, we'll use that to make sure that types get","     * cast correctly and that there are no extraneous fields or columns.","     *","     * For best performance, it's recommended that you batch your data into","     * sets of a couple thousand records before writing it. In the future we'll","     * have some utilities within node-influx to make this easier.","     *","     * ---","     *","     * A note when using manually-specified times and precisions: by default","     * we write using the `ms` precision since that's what JavaScript gives us.","     * You can adjust this. However, there is some special behaviour if you","     * manually specify a timestamp in your points:","     *  - if you specify the timestamp as a Date object, we'll convert it to","     *    milliseconds and manipulate it as needed to get the right precision","     *  - if provide a INanoDate as returned from {@link toNanoTime} or the","     *    results from an Influx query, we'll be able to pull the precise","     *    nanosecond timestamp and manipulate it to get the right precision","     *  - if you provide a string or number as the timestamp, we'll pass it","     *    straight into Influx.","     *","     * Please see the IPoint and IWriteOptions types for a","     * full list of possible options.","     *","     * @param {IPoint[]} points","     * @param {IWriteOptions} [options]","     * @return {Promise<void>}","     * @example","     * // write a point into the default database with","     * // the default retention policy.","     * influx.writePoints([","     *   {","     *     measurement: 'perf',","     *     tags: { host: 'box1.example.com' },","     *     fields: { cpu: getCpuUsage(), mem: getMemUsage() },","     *   }","     * ])","     *","     * // you can manually specify the database,","     * // retention policy, and time precision:","     * influx.writePoints([","     *   {","     *     measurement: 'perf',","     *     tags: { host: 'box1.example.com' },","     *     fields: { cpu: getCpuUsage(), mem: getMemUsage() },","     *     timestamp: getLastRecordedTime(),","     *   }","     * ], {","     *   database: 'my_db',","     *   retentionPolicy: '1d',","     *   precision: 's'","     * })","     */","    InfluxDB.prototype.writePoints = function (points, options) {","        var _this = this;","        if (options === void 0) { options = {}; }","        var _a = options.database, database = _a === void 0 ? this.defaultDB() : _a, _b = options.precision, precision = _b === void 0 ? 'n' : _b, retentionPolicy = options.retentionPolicy;","        var payload = '';","        points.forEach(function (point) {","            var _a = point.fields, fields = _a === void 0 ? {} : _a, _b = point.tags, tags = _b === void 0 ? {} : _b, measurement = point.measurement, timestamp = point.timestamp;","            var schema = _this.schema[database] && _this.schema[database][measurement];","            var fieldsPairs = schema ? schema.coerceFields(fields) : schema_1.coerceBadly(fields);","            var tagsNames = schema ? schema.checkTags(tags) : Object.keys(tags);","            payload += (payload.length > 0 ? '\\n' : '') + measurement;","            for (var i = 0; i < tagsNames.length; i += 1) {","                payload += ','","                    + grammar.escape.tag(tagsNames[i])","                    + '='","                    + grammar.escape.tag(tags[tagsNames[i]]);","            }","            for (var i = 0; i < fieldsPairs.length; i += 1) {","                payload += (i === 0 ? ' ' : ',')","                    + grammar.escape.tag(fieldsPairs[i][0])","                    + '='","                    + fieldsPairs[i][1];","            }","            if (timestamp !== undefined) {","                payload += ' ' + grammar.castTimestamp(timestamp, precision);","            }","        });","        return this.pool.discard({","            body: payload,","            method: 'POST',","            path: '/write',","            query: Object.assign({","                db: database,","                p: this.options.password,","                precision: precision,","                rp: retentionPolicy,","                u: this.options.username,","            }),","        });","    };","    /**","     * writeMeasurement functions similarly to {@link InfluxDB#writePoints}, but","     * it automatically fills in the `measurement` value for all points for you.","     *","     * @param {String} measurement","     * @param {IPoint[]} points","     * @param {IWriteOptions} [options]","     * @return {Promise<void>}","     * @example","     * influx.writeMeasurement('perf', [","     *   {","     *     tags: { host: 'box1.example.com' },","     *     fields: { cpu: getCpuUsage(), mem: getMemUsage() },","     *   }","     * ])","     */","    InfluxDB.prototype.writeMeasurement = function (measurement, points, options) {","        if (options === void 0) { options = {}; }","        points = points.map(function (p) { return Object.assign({ measurement: measurement }, p); });","        return this.writePoints(points, options);","    };","    /**","     * .query() runs a query (or list of queries), and returns the results in a","     * friendly format, {@link IResults}. If you run multiple queries, an array of results","     * will be returned, otherwise a single result (array of objects) will be returned.","     *","     * @param {String|String[]} query","     * @param {IQueryOptions} [options]","     * @return {Promise<IResults|Results[]>} result(s)","     * @example","     * influx.query('select * from perf').then(results => {","     *   console.log(results)","     * })","     */","    InfluxDB.prototype.query = function (query, options) {","        if (options === void 0) { options = {}; }","        if (Array.isArray(query)) {","            query = query.join(';');","        }","        // If the consumer asked explicitly for nanosecond precision parsing,","        // remove that to cause Influx to give us ISO dates that","        // we can parse correctly.","        if (options.precision === 'n') {","            options = Object.assign({}, options); // avoid mutating","            delete options.precision;","        }","        return this.queryRaw(query, options).then(function (res) { return results_1.parse(res, options.precision); });","    };","    /**","     * queryRaw functions similarly to .query() but it does no fancy","     * transformations on the returned data; it calls `JSON.parse` and returns","     * those results verbatim.","     *","     * @param {String|String[]} query","     * @param {IQueryOptions} [options]","     * @return {Promise<*>}","     * @example","     * influx.queryRaw('select * from perf').then(rawData => {","     *   console.log(rawData)","     * })","     */","    InfluxDB.prototype.queryRaw = function (query, options) {","        if (options === void 0) { options = {}; }","        var _a = options.database, database = _a === void 0 ? this.defaultDB() : _a, retentionPolicy = options.retentionPolicy;","        if (query instanceof Array) {","            query = query.join(';');","        }","        return this.pool.json(this.getQueryOpts({","            db: database,","            epoch: options.precision,","            q: query,","            rp: retentionPolicy,","        }));","    };","    /**","     * Pings all available hosts, collecting online status and version info.","     * @param  {Number}               timeout Given in milliseconds","     * @return {Promise<IPingStats[]>}","     * @example","     * influx.ping(5000).then(hosts => {","     *   hosts.forEach(host => {","     *     if (host.online) {","     *       console.log(`${host.url.host} responded in ${host.rtt}ms running ${host.version})`)","     *     } else {","     *       console.log(`${host.url.host} is offline :(`)","     *     }","     *   })","     * })","     */","    InfluxDB.prototype.ping = function (timeout) {","        return this.pool.ping(timeout);","    };","    /**","     * Returns the default database that queries operates on. It throws if called","     * when a default database isn't set.","     * @private","     */","    InfluxDB.prototype.defaultDB = function () {","        if (!this.options.database) {","            throw new Error('Attempted to run an influx query without a default'","                + ' database specified or an explicit database provided.');","        }","        return this.options.database;","    };","    /**","     * Creates options to be passed into the pool to query databases.","     * @private","     */","    InfluxDB.prototype.getQueryOpts = function (params, method) {","        if (method === void 0) { method = 'GET'; }","        return {","            method: method,","            path: '/query',","            query: Object.assign({","                p: this.options.password,","                u: this.options.username,","            }, params),","        };","    };","    return InfluxDB;","}());","exports.InfluxDB = InfluxDB;",""],"l":{"2":1,"3":4,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"17":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"36":1,"37":0,"38":0,"43":0,"44":0,"46":0,"47":0,"49":0,"50":0,"56":1,"57":0,"58":0,"59":0,"61":0,"62":0,"63":0,"64":0,"68":0,"114":1,"180":1,"181":0,"186":0,"188":0,"189":0,"191":0,"192":0,"194":0,"195":0,"204":0,"205":0,"206":0,"213":0,"214":0,"215":0,"216":0,"218":0,"219":0,"220":0,"221":0,"224":0,"225":0,"227":0,"237":1,"238":0,"249":1,"250":0,"261":1,"262":0,"263":0,"274":1,"275":0,"276":0,"279":0,"302":1,"303":0,"304":0,"305":0,"306":0,"307":0,"309":0,"312":0,"323":1,"324":0,"325":0,"354":1,"355":0,"356":0,"357":0,"358":0,"360":0,"361":0,"363":0,"379":1,"380":0,"395":1,"396":0,"397":0,"411":1,"412":0,"426":1,"427":0,"428":0,"442":1,"443":0,"444":0,"456":1,"457":0,"468":1,"469":0,"480":1,"481":0,"497":1,"498":0,"499":0,"511":1,"512":0,"513":0,"526":1,"527":0,"528":0,"556":1,"557":0,"561":0,"585":1,"586":0,"590":0,"604":1,"605":0,"606":0,"643":1,"644":0,"645":0,"709":1,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"726":0,"727":0,"732":0,"733":0,"736":0,"765":1,"766":0,"767":0,"768":0,"783":1,"784":0,"785":0,"786":0,"791":0,"792":0,"793":0,"795":0,"810":1,"811":0,"812":0,"813":0,"814":0,"816":0,"838":1,"839":0,"846":1,"847":0,"848":0,"851":0,"857":1,"858":0,"859":0,"868":1,"870":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/builder.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/builder.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":6,"41":0,"42":1,"43":6,"44":0,"45":1,"46":6,"47":0,"48":1,"49":6,"50":0,"51":1,"52":6,"53":0,"54":1,"55":6,"56":0,"57":1,"58":6,"59":0,"60":1,"61":6,"62":0,"63":1,"64":6,"65":0,"66":1,"67":6,"68":0,"69":1,"70":6,"71":0,"72":1,"73":6,"74":0,"75":1,"76":6,"77":0,"78":1,"79":6,"80":0,"81":1,"82":0,"83":1,"84":1,"85":1,"86":1,"87":0,"88":1,"89":0,"90":0,"91":1,"92":0,"93":0,"94":1,"95":0,"96":0,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":1,"105":1,"106":0,"107":0,"108":0,"109":1,"110":1,"111":0,"112":0,"113":0,"114":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":6,"9":6,"10":6,"11":6,"12":6,"13":6,"14":6,"15":6,"16":6,"17":6,"18":6,"19":6,"20":6,"21":6,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"fnMap":{"1":{"name":"regexHasFlags","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":18},"end":{"line":30,"column":30}}},"3":{"name":"Expression","line":31,"loc":{"start":{"line":31,"column":4},"end":{"line":31,"column":26}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":31},"end":{"line":40,"column":47}}},"5":{"name":"(anonymous_5)","line":50,"loc":{"start":{"line":50,"column":33},"end":{"line":50,"column":49}}},"6":{"name":"(anonymous_6)","line":67,"loc":{"start":{"line":67,"column":31},"end":{"line":67,"column":45}}},"7":{"name":"(anonymous_7)","line":86,"loc":{"start":{"line":86,"column":33},"end":{"line":86,"column":50}}},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":13},"end":{"line":123,"column":25}}},"9":{"name":"(anonymous_9)","line":135,"loc":{"start":{"line":135,"column":13},"end":{"line":135,"column":25}}},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":13},"end":{"line":147,"column":25}}},"11":{"name":"(anonymous_11)","line":159,"loc":{"start":{"line":159,"column":13},"end":{"line":159,"column":25}}},"12":{"name":"(anonymous_12)","line":171,"loc":{"start":{"line":171,"column":13},"end":{"line":171,"column":25}}},"13":{"name":"(anonymous_13)","line":183,"loc":{"start":{"line":183,"column":13},"end":{"line":183,"column":25}}},"14":{"name":"(anonymous_14)","line":195,"loc":{"start":{"line":195,"column":13},"end":{"line":195,"column":25}}},"15":{"name":"(anonymous_15)","line":207,"loc":{"start":{"line":207,"column":13},"end":{"line":207,"column":25}}},"16":{"name":"(anonymous_16)","line":219,"loc":{"start":{"line":219,"column":13},"end":{"line":219,"column":25}}},"17":{"name":"(anonymous_17)","line":231,"loc":{"start":{"line":231,"column":13},"end":{"line":231,"column":25}}},"18":{"name":"(anonymous_18)","line":243,"loc":{"start":{"line":243,"column":13},"end":{"line":243,"column":25}}},"19":{"name":"(anonymous_19)","line":255,"loc":{"start":{"line":255,"column":13},"end":{"line":255,"column":25}}},"20":{"name":"(anonymous_20)","line":267,"loc":{"start":{"line":267,"column":13},"end":{"line":267,"column":25}}},"21":{"name":"(anonymous_21)","line":279,"loc":{"start":{"line":279,"column":13},"end":{"line":279,"column":25}}},"22":{"name":"(anonymous_22)","line":290,"loc":{"start":{"line":290,"column":36},"end":{"line":290,"column":48}}},"23":{"name":"(anonymous_23)","line":306,"loc":{"start":{"line":306,"column":19},"end":{"line":306,"column":31}}},"24":{"name":"Measurement","line":307,"loc":{"start":{"line":307,"column":4},"end":{"line":307,"column":27}}},"25":{"name":"(anonymous_25)","line":315,"loc":{"start":{"line":315,"column":33},"end":{"line":315,"column":49}}},"26":{"name":"(anonymous_26)","line":324,"loc":{"start":{"line":324,"column":35},"end":{"line":324,"column":62}}},"27":{"name":"(anonymous_27)","line":333,"loc":{"start":{"line":333,"column":31},"end":{"line":333,"column":45}}},"28":{"name":"(anonymous_28)","line":342,"loc":{"start":{"line":342,"column":37},"end":{"line":342,"column":49}}},"29":{"name":"(anonymous_29)","line":346,"loc":{"start":{"line":346,"column":33},"end":{"line":346,"column":46}}},"30":{"name":"(anonymous_30)","line":347,"loc":{"start":{"line":347,"column":17},"end":{"line":347,"column":30}}},"31":{"name":"parseMeasurement","line":353,"loc":{"start":{"line":353,"column":0},"end":{"line":353,"column":29}}},"32":{"name":"parseWhere","line":360,"loc":{"start":{"line":360,"column":0},"end":{"line":360,"column":23}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"3":{"start":{"line":4,"column":0},"end":{"line":9,"column":1}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":8},"end":{"line":6,"column":35}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":40}},"7":{"start":{"line":30,"column":0},"end":{"line":294,"column":5}},"8":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":24}},"10":{"start":{"line":40,"column":4},"end":{"line":43,"column":6}},"11":{"start":{"line":41,"column":8},"end":{"line":41,"column":25}},"12":{"start":{"line":42,"column":8},"end":{"line":42,"column":20}},"13":{"start":{"line":50,"column":4},"end":{"line":53,"column":6}},"14":{"start":{"line":51,"column":8},"end":{"line":51,"column":55}},"15":{"start":{"line":52,"column":8},"end":{"line":52,"column":20}},"16":{"start":{"line":67,"column":4},"end":{"line":70,"column":6}},"17":{"start":{"line":68,"column":8},"end":{"line":68,"column":69}},"18":{"start":{"line":69,"column":8},"end":{"line":69,"column":20}},"19":{"start":{"line":86,"column":4},"end":{"line":117,"column":6}},"20":{"start":{"line":87,"column":8},"end":{"line":116,"column":9}},"21":{"start":{"line":89,"column":16},"end":{"line":89,"column":39}},"22":{"start":{"line":90,"column":16},"end":{"line":90,"column":28}},"23":{"start":{"line":92,"column":16},"end":{"line":92,"column":67}},"24":{"start":{"line":93,"column":16},"end":{"line":93,"column":28}},"25":{"start":{"line":95,"column":16},"end":{"line":95,"column":58}},"26":{"start":{"line":96,"column":16},"end":{"line":96,"column":28}},"27":{"start":{"line":98,"column":16},"end":{"line":101,"column":17}},"28":{"start":{"line":99,"column":20},"end":{"line":99,"column":65}},"29":{"start":{"line":100,"column":20},"end":{"line":100,"column":32}},"30":{"start":{"line":102,"column":16},"end":{"line":109,"column":17}},"31":{"start":{"line":103,"column":20},"end":{"line":106,"column":21}},"32":{"start":{"line":104,"column":24},"end":{"line":105,"column":77}},"33":{"start":{"line":107,"column":20},"end":{"line":107,"column":62}},"34":{"start":{"line":108,"column":20},"end":{"line":108,"column":32}},"35":{"start":{"line":110,"column":16},"end":{"line":113,"column":17}},"36":{"start":{"line":111,"column":20},"end":{"line":111,"column":54}},"37":{"start":{"line":112,"column":20},"end":{"line":112,"column":32}},"38":{"start":{"line":114,"column":16},"end":{"line":115,"column":104}},"39":{"start":{"line":118,"column":4},"end":{"line":129,"column":7}},"40":{"start":{"line":124,"column":12},"end":{"line":124,"column":35}},"41":{"start":{"line":125,"column":12},"end":{"line":125,"column":24}},"42":{"start":{"line":130,"column":4},"end":{"line":141,"column":7}},"43":{"start":{"line":136,"column":12},"end":{"line":136,"column":34}},"44":{"start":{"line":137,"column":12},"end":{"line":137,"column":24}},"45":{"start":{"line":142,"column":4},"end":{"line":153,"column":7}},"46":{"start":{"line":148,"column":12},"end":{"line":148,"column":33}},"47":{"start":{"line":149,"column":12},"end":{"line":149,"column":24}},"48":{"start":{"line":154,"column":4},"end":{"line":165,"column":7}},"49":{"start":{"line":160,"column":12},"end":{"line":160,"column":33}},"50":{"start":{"line":161,"column":12},"end":{"line":161,"column":24}},"51":{"start":{"line":166,"column":4},"end":{"line":177,"column":7}},"52":{"start":{"line":172,"column":12},"end":{"line":172,"column":33}},"53":{"start":{"line":173,"column":12},"end":{"line":173,"column":24}},"54":{"start":{"line":178,"column":4},"end":{"line":189,"column":7}},"55":{"start":{"line":184,"column":12},"end":{"line":184,"column":33}},"56":{"start":{"line":185,"column":12},"end":{"line":185,"column":24}},"57":{"start":{"line":190,"column":4},"end":{"line":201,"column":7}},"58":{"start":{"line":196,"column":12},"end":{"line":196,"column":33}},"59":{"start":{"line":197,"column":12},"end":{"line":197,"column":24}},"60":{"start":{"line":202,"column":4},"end":{"line":213,"column":7}},"61":{"start":{"line":208,"column":12},"end":{"line":208,"column":34}},"62":{"start":{"line":209,"column":12},"end":{"line":209,"column":24}},"63":{"start":{"line":214,"column":4},"end":{"line":225,"column":7}},"64":{"start":{"line":220,"column":12},"end":{"line":220,"column":34}},"65":{"start":{"line":221,"column":12},"end":{"line":221,"column":24}},"66":{"start":{"line":226,"column":4},"end":{"line":237,"column":7}},"67":{"start":{"line":232,"column":12},"end":{"line":232,"column":34}},"68":{"start":{"line":233,"column":12},"end":{"line":233,"column":24}},"69":{"start":{"line":238,"column":4},"end":{"line":249,"column":7}},"70":{"start":{"line":244,"column":12},"end":{"line":244,"column":33}},"71":{"start":{"line":245,"column":12},"end":{"line":245,"column":24}},"72":{"start":{"line":250,"column":4},"end":{"line":261,"column":7}},"73":{"start":{"line":256,"column":12},"end":{"line":256,"column":34}},"74":{"start":{"line":257,"column":12},"end":{"line":257,"column":24}},"75":{"start":{"line":262,"column":4},"end":{"line":273,"column":7}},"76":{"start":{"line":268,"column":12},"end":{"line":268,"column":33}},"77":{"start":{"line":269,"column":12},"end":{"line":269,"column":24}},"78":{"start":{"line":274,"column":4},"end":{"line":285,"column":7}},"79":{"start":{"line":280,"column":12},"end":{"line":280,"column":34}},"80":{"start":{"line":281,"column":12},"end":{"line":281,"column":24}},"81":{"start":{"line":290,"column":4},"end":{"line":292,"column":6}},"82":{"start":{"line":291,"column":8},"end":{"line":291,"column":36}},"83":{"start":{"line":293,"column":4},"end":{"line":293,"column":22}},"84":{"start":{"line":295,"column":0},"end":{"line":295,"column":32}},"85":{"start":{"line":306,"column":0},"end":{"line":351,"column":5}},"86":{"start":{"line":307,"column":4},"end":{"line":309,"column":5}},"87":{"start":{"line":308,"column":8},"end":{"line":308,"column":40}},"88":{"start":{"line":315,"column":4},"end":{"line":318,"column":6}},"89":{"start":{"line":316,"column":8},"end":{"line":316,"column":29}},"90":{"start":{"line":317,"column":8},"end":{"line":317,"column":20}},"91":{"start":{"line":324,"column":4},"end":{"line":327,"column":6}},"92":{"start":{"line":325,"column":8},"end":{"line":325,"column":40}},"93":{"start":{"line":326,"column":8},"end":{"line":326,"column":20}},"94":{"start":{"line":333,"column":4},"end":{"line":336,"column":6}},"95":{"start":{"line":334,"column":8},"end":{"line":334,"column":27}},"96":{"start":{"line":335,"column":8},"end":{"line":335,"column":20}},"97":{"start":{"line":342,"column":4},"end":{"line":349,"column":6}},"98":{"start":{"line":343,"column":8},"end":{"line":345,"column":9}},"99":{"start":{"line":344,"column":12},"end":{"line":344,"column":105}},"100":{"start":{"line":346,"column":8},"end":{"line":348,"column":23}},"101":{"start":{"line":346,"column":48},"end":{"line":346,"column":59}},"102":{"start":{"line":347,"column":32},"end":{"line":347,"column":66}},"103":{"start":{"line":350,"column":4},"end":{"line":350,"column":23}},"104":{"start":{"line":352,"column":0},"end":{"line":352,"column":34}},"105":{"start":{"line":353,"column":0},"end":{"line":358,"column":1}},"106":{"start":{"line":354,"column":4},"end":{"line":356,"column":5}},"107":{"start":{"line":355,"column":8},"end":{"line":355,"column":59}},"108":{"start":{"line":357,"column":4},"end":{"line":357,"column":25}},"109":{"start":{"line":359,"column":0},"end":{"line":359,"column":44}},"110":{"start":{"line":360,"column":0},"end":{"line":365,"column":1}},"111":{"start":{"line":361,"column":4},"end":{"line":363,"column":5}},"112":{"start":{"line":362,"column":8},"end":{"line":362,"column":52}},"113":{"start":{"line":364,"column":4},"end":{"line":364,"column":19}},"114":{"start":{"line":366,"column":0},"end":{"line":366,"column":32}}},"branchMap":{"1":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":5,"column":4}},{"start":{"line":5,"column":4},"end":{"line":5,"column":4}}]},"2":{"line":87,"type":"switch","locations":[{"start":{"line":88,"column":12},"end":{"line":90,"column":28}},{"start":{"line":91,"column":12},"end":{"line":93,"column":28}},{"start":{"line":94,"column":12},"end":{"line":96,"column":28}},{"start":{"line":97,"column":12},"end":{"line":115,"column":104}}]},"3":{"line":95,"type":"cond-expr","locations":[{"start":{"line":95,"column":40},"end":{"line":95,"column":46}},{"start":{"line":95,"column":49},"end":{"line":95,"column":56}}]},"4":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":16}},{"start":{"line":98,"column":16},"end":{"line":98,"column":16}}]},"5":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":16},"end":{"line":102,"column":16}},{"start":{"line":102,"column":16},"end":{"line":102,"column":16}}]},"6":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":20},"end":{"line":103,"column":20}},{"start":{"line":103,"column":20},"end":{"line":103,"column":20}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":16},"end":{"line":110,"column":16}},{"start":{"line":110,"column":16},"end":{"line":110,"column":16}}]},"8":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":20},"end":{"line":110,"column":25}},{"start":{"line":110,"column":29},"end":{"line":110,"column":65}}]},"9":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":8},"end":{"line":343,"column":8}},{"start":{"line":343,"column":8},"end":{"line":343,"column":8}}]},"10":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":4},"end":{"line":354,"column":4}},{"start":{"line":354,"column":4},"end":{"line":354,"column":4}}]},"11":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":4},"end":{"line":361,"column":4}},{"start":{"line":361,"column":4},"end":{"line":361,"column":4}}]}},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","var grammar_1 = require(\"./grammar\");","function regexHasFlags(re) {","    if (typeof re.flags !== 'undefined') {","        return re.flags.length > 0;","    }","    return !(/\\/$/).test(re.toString());","}","/**"," * Expression is used to build filtering expressions, like those used in WHERE"," * clauses. It can be used for fluent and safe building of queries using"," * untrusted input."," *"," * @example"," * e => e"," *   .field('host').equals.value('ares.peet.io')"," *   .or"," *   .field('host').matches(/example\\.com$/)"," *   .or"," *   .expr(e => e"," *     .field('country').equals.value('US')"," *     .and"," *     .field('state').equals.value('WA'));"," *"," * // Generates:"," * // \"host\" = 'ares.peet.io' OR \"host\" ~= /example\\.com$/ OR \\"," * //   (\"county\" = 'US' AND \"state\" = 'WA')"," */","var Expression = (function () {","    function Expression() {","        this.query = [];","    }","    /**","     * Inserts a tag reference into the expression; the name will be","     * automatically escaped.","     * @param  {String} name","     * @return {Expression}","     */","    Expression.prototype.tag = function (name) {","        this.field(name);","        return this;","    };","    /**","     * Inserts a field reference into the expression; the name will be","     * automatically escaped.","     * @param  {String} name","     * @return {Expression}","     */","    Expression.prototype.field = function (name) {","        this.query.push(grammar_1.escape.quoted(name));","        return this;","    };","    /**","     * Inserts a subexpression; invokes the function with a new expression","     * that can be chained on.","     * @param  {function(e: Expression): Expression}  fn","     * @return {Expression}","     * @example","     * e.field('a').equals.value('b')","     *   .or.expr(e =>","     *     e.field('b').equals.value('b')","     *     .and.field('a').equals.value('c'))","     *   .toString()","     * // \"a\" = 'b' OR (\"b\" = 'b' AND \"a\" = 'c')","     */","    Expression.prototype.exp = function (fn) {","        this.query.push('(' + fn(new Expression()).toString() + ')');","        return this;","    };","    /**","     * Value chains on a value to the expression.","     *","     *  - Numbers will be inserted verbatim","     *  - Strings will be escaped and inserted","     *  - Booleans will be inserted correctly","     *  - Dates will be formatted and inserted correctly, including INanoDates.","     *  - Regular expressions will be inserted correctly, however an error will","     *    be thrown if they contain flags, as regex flags do not work in Influx","     *  - Otherwise we'll try to call `.toString()` on the value, throwing","     *    if we cannot do so.","     *","     * @param  {*}  value","     * @return {Expression}","     */","    Expression.prototype.value = function (value) {","        switch (typeof value) {","            case 'number':","                this.query.push(value);","                return this;","            case 'string':","                this.query.push(grammar_1.escape.stringLit(value));","                return this;","            case 'boolean':","                this.query.push(value ? 'TRUE' : 'FALSE');","                return this;","            default:","                if (value instanceof Date) {","                    this.query.push(grammar_1.formatDate(value));","                    return this;","                }","                if (value instanceof RegExp) {","                    if (regexHasFlags(value)) {","                        throw new Error('Attempted to query using a regex with flags, ' +","                            'but Influx doesn\\'t support flags in queries.');","                    }","                    this.query.push('/' + value.source + '/');","                    return this;","                }","                if (value && typeof value.toString === 'function') {","                    this.query.push(value.toString());","                    return this;","                }","                throw new Error(\"node-influx doesn't know how to encode the provided value into a \" +","                    'query. If you think this is a bug, open an issue here: https://git.io/influx-err');","        }","    };","    Object.defineProperty(Expression.prototype, \"and\", {","        /**","         * Chains on an AND clause to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('AND');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"or\", {","        /**","         * Chains on an OR clause to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('OR');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"plus\", {","        /**","         * Chains on a `+` operator to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('+');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"times\", {","        /**","         * Chains on a `*` operator to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('*');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"minus\", {","        /**","         * Chains on a `-` operator to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('-');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"div\", {","        /**","         * Chains on a `/` operator to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('/');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"equals\", {","        /**","         * Chains on a `=` conditional to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('=');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"matches\", {","        /**","         * Chains on a `=~` conditional to the expression to match regexes.","         * @type {Expression}","         */","        get: function () {","            this.query.push('=~');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"doesntMatch\", {","        /**","         * Chains on a `!`` conditional to the expression to match regexes.","         * @type {Expression}","         */","        get: function () {","            this.query.push('!~');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"notEqual\", {","        /**","         * Chains on a `!=` conditional to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('!=');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"gt\", {","        /**","         * Chains on a `>` conditional to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('>');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"gte\", {","        /**","         * Chains on a `>=` conditional to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('>=');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"lt\", {","        /**","         * Chains on a `<` conditional to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('<');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    Object.defineProperty(Expression.prototype, \"lte\", {","        /**","         * Chains on a `<=` conditional to the expression.","         * @type {Expression}","         */","        get: function () {","            this.query.push('<=');","            return this;","        },","        enumerable: true,","        configurable: true","    });","    /**","     * Converts the expression into its InfluxQL representation.","     * @return {String}","     */","    Expression.prototype.toString = function () {","        return this.query.join(' ');","    };","    return Expression;","}());","exports.Expression = Expression;","/**"," * Measurement creates a reference to a particular measurement. You can"," * reference it solely by its name, but you can also specify the retention"," * policy and database it lives under."," *"," * @example"," * m.name('my_measurement') // \"my_measurement\""," * m.name('my_measurement').policy('one_day') // \"one_day\".\"my_measurement\""," * m.name('my_measurement').policy('one_day').db('mydb') // \"mydb\".one_day\".\"my_measurement\""," */","var Measurement = (function () {","    function Measurement() {","        this.parts = [null, null, null];","    }","    /**","     * Sets the measurement name.","     * @param  {String} name","     * @return {Measurement}","     */","    Measurement.prototype.name = function (name) {","        this.parts[2] = name;","        return this;","    };","    /**","     * Sets the retention policy name.","     * @param  {String} retentionPolicy","     * @return {Measurement}","     */","    Measurement.prototype.policy = function (retentionPolicy) {","        this.parts[1] = retentionPolicy;","        return this;","    };","    /**","     * Sets the database name.","     * @param  {String} db","     * @return {Measurement}","     */","    Measurement.prototype.db = function (db) {","        this.parts[0] = db;","        return this;","    };","    /**","     * Converts the measurement into its InfluxQL representation.","     * @return {String}","     * @throws {Error} if a measurement name is not provided","     */","    Measurement.prototype.toString = function () {","        if (!this.parts[2]) {","            throw new Error(\"You must specify a measurement name to query! Got `\" + this.parts[2] + \"`\");","        }","        return this.parts.filter(function (p) { return !!p; })","            .map(function (p) { return grammar_1.escape.quoted(p); })","            .join('.');","    };","    return Measurement;","}());","exports.Measurement = Measurement;","function parseMeasurement(q) {","    if (typeof q.measurement === 'function') {","        return q.measurement(new Measurement()).toString();","    }","    return q.measurement;","}","exports.parseMeasurement = parseMeasurement;","function parseWhere(q) {","    if (typeof q.where === 'function') {","        return q.where(new Expression()).toString();","    }","    return q.where;","}","exports.parseWhere = parseWhere;",""],"l":{"2":1,"3":1,"4":1,"5":0,"6":0,"8":0,"30":1,"31":1,"32":0,"40":1,"41":0,"42":0,"50":1,"51":0,"52":0,"67":1,"68":0,"69":0,"86":1,"87":0,"89":0,"90":0,"92":0,"93":0,"95":0,"96":0,"98":0,"99":0,"100":0,"102":0,"103":0,"104":0,"107":0,"108":0,"110":0,"111":0,"112":0,"114":0,"118":1,"124":6,"125":0,"130":1,"136":6,"137":0,"142":1,"148":6,"149":0,"154":1,"160":6,"161":0,"166":1,"172":6,"173":0,"178":1,"184":6,"185":0,"190":1,"196":6,"197":0,"202":1,"208":6,"209":0,"214":1,"220":6,"221":0,"226":1,"232":6,"233":0,"238":1,"244":6,"245":0,"250":1,"256":6,"257":0,"262":1,"268":6,"269":0,"274":1,"280":6,"281":0,"290":1,"291":0,"293":1,"295":1,"306":1,"307":1,"308":0,"315":1,"316":0,"317":0,"324":1,"325":0,"326":0,"333":1,"334":0,"335":0,"342":1,"343":0,"344":0,"346":0,"347":0,"350":1,"352":1,"353":1,"354":0,"355":0,"357":0,"359":1,"360":1,"361":0,"362":0,"364":0,"366":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/index.js","s":{"1":1,"2":3,"3":10,"4":10,"5":1,"6":1,"7":1,"8":1},"b":{"1":[10,0]},"f":{"1":3},"fnMap":{"1":{"name":"__export","line":2,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":21}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":4,"column":1}},"2":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"3":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"4":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":30}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":26}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":29}}},"branchMap":{"1":{"line":3,"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":21}},{"start":{"line":3,"column":21},"end":{"line":3,"column":21}}]}},"code":["\"use strict\";","function __export(m) {","    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];","}","Object.defineProperty(exports, \"__esModule\", { value: true });","__export(require(\"./escape\"));","__export(require(\"./ds\"));","__export(require(\"./times\"));",""],"l":{"2":1,"3":10,"5":1,"6":1,"7":1,"8":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/escape.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/escape.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":4,"7":2,"8":4,"9":4,"10":4,"11":4,"12":4,"13":4,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1,"31":4,"32":1},"b":{"1":[2,2],"2":[4,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":1,"2":4,"3":0,"4":4},"fnMap":{"1":{"name":"(anonymous_1)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":27}}},"2":{"name":"Escaper","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":43}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":31},"end":{"line":49,"column":46}}},"4":{"name":"(anonymous_4)","line":71,"loc":{"start":{"line":71,"column":14},"end":{"line":71,"column":27}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"4":{"start":{"line":36,"column":0},"end":{"line":70,"column":5}},"5":{"start":{"line":37,"column":4},"end":{"line":44,"column":5}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":43}},"7":{"start":{"line":38,"column":31},"end":{"line":38,"column":41}},"8":{"start":{"line":39,"column":8},"end":{"line":39,"column":51}},"9":{"start":{"line":39,"column":34},"end":{"line":39,"column":49}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":25}},"11":{"start":{"line":41,"column":8},"end":{"line":41,"column":31}},"12":{"start":{"line":42,"column":8},"end":{"line":42,"column":64}},"13":{"start":{"line":43,"column":8},"end":{"line":43,"column":60}},"14":{"start":{"line":49,"column":4},"end":{"line":68,"column":6}},"15":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"16":{"start":{"line":51,"column":12},"end":{"line":51,"column":34}},"17":{"start":{"line":53,"column":8},"end":{"line":53,"column":47}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":28}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":38}},"20":{"start":{"line":56,"column":8},"end":{"line":60,"column":9}},"21":{"start":{"line":57,"column":12},"end":{"line":57,"column":87}},"22":{"start":{"line":58,"column":12},"end":{"line":58,"column":43}},"23":{"start":{"line":59,"column":12},"end":{"line":59,"column":38}},"24":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"25":{"start":{"line":62,"column":12},"end":{"line":62,"column":47}},"26":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"27":{"start":{"line":65,"column":12},"end":{"line":65,"column":78}},"28":{"start":{"line":67,"column":8},"end":{"line":67,"column":50}},"29":{"start":{"line":69,"column":4},"end":{"line":69,"column":19}},"30":{"start":{"line":71,"column":0},"end":{"line":71,"column":56}},"31":{"start":{"line":71,"column":29},"end":{"line":71,"column":53}},"32":{"start":{"line":91,"column":0},"end":{"line":108,"column":2}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":8}},{"start":{"line":39,"column":8},"end":{"line":39,"column":8}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]}},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","var ds_1 = require(\"./ds\");","var reEscape = /[-|\\\\{()[\\]^$+*?.]/g;","/**"," * The Escaper escapes the special characters in the provided list"," * with backslashes. Much of the code here is inspired by that in the"," * sqlstring packet found here: https://github.com/mysqljs/sqlstring"," *"," * Instances of the Escaper are derived from the documentation of escape"," * sequences found here: https://aka.ms/co1m4k"," *"," * sqlstring is made available under the following license:"," *"," *   Copyright (c) 2012 Felix Geisendörfer (felix@debuggable.com) and contributors"," *"," *   Permission is hereby granted, free of charge, to any person obtaining a copy"," *   of this software and associated documentation files (the \"Software\"), to deal"," *   in the Software without restriction, including without limitation the rights"," *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"," *   copies of the Software, and to permit persons to whom the Software is"," *   furnished to do so, subject to the following conditions:"," *"," *   The above copyright notice and this permission notice shall be included in"," *   all copies or substantial portions of the Software."," *"," *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"," *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"," *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"," *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"," *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"," *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"," *   THE SOFTWARE."," *"," */","var Escaper = (function () {","    function Escaper(chars, wrap, escaper) {","        if (wrap === void 0) { wrap = ''; }","        if (escaper === void 0) { escaper = '\\\\'; }","        this.wrap = wrap;","        this.escaper = escaper;","        var patterns = chars.join('').replace(reEscape, '\\\\$&');","        this.re = new RegExp('[' + patterns + '\\\\\\\\]', 'g');","    }","    /**","     * Escape replaces occurrences of special characters within the target","     * string with the necessary escape codes.","     */","    Escaper.prototype.escape = function (val) {","        if (val instanceof ds_1.Raw) {","            return val.getValue();","        }","        var chunkIndex = this.re.lastIndex = 0;","        var escapedVal = '';","        var match = this.re.exec(val);","        while (match) {","            escapedVal += val.slice(chunkIndex, match.index) + this.escaper + match[0];","            chunkIndex = this.re.lastIndex;","            match = this.re.exec(val);","        }","        if (chunkIndex === 0) {","            return this.wrap + val + this.wrap;","        }","        if (chunkIndex < val.length) {","            return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap;","        }","        return this.wrap + escapedVal + this.wrap;","    };","    return Escaper;","}());","var bindEsc = function (e) { return e.escape.bind(e); };","/**"," * tagEscaper escapes tag keys, tag values, and field keys."," * @type {Object}"," * @property {function(s: string): string } quoted Escapes and wraps quoted"," *     values, such as database names."," * @property {function(s: string): string } stringLit Escapes and"," *     wraps string literals."," * @property {function(s: string): string } measurement Escapes measurement"," *     names on the line protocol."," * @property {function(s: string): string } tag Escapes tag keys, take values,"," *     and field keys on the line protocol."," *"," * @example"," * console.log(escape.quoted('my_\"db')); // => \"my_\\\"db\""," * console.log(escape.stringLit('hello\\'world')); // => 'hello\\'world'"," *"," * console.log(escape.measurement('my measurement')); // => my\\ measurement"," * console.log(escape.tag('my tag=')); // => my\\ tag\\="," */","exports.escape = {","    /**","     * measurement escapes measurement names.","     */","    measurement: bindEsc(new Escaper([',', ' '])),","    /**","     * quoted escapes quoted values, such as database names.","     */","    quoted: bindEsc(new Escaper(['\"'], '\"')),","    /**","     * stringLitEscaper escapes single quotes in string literals.","     */","    stringLit: bindEsc(new Escaper(['\\''], '\\'')),","    /**","     * tagEscaper escapes tag keys, tag values, and field keys.","     */","    tag: bindEsc(new Escaper([',', '=', ' '])),","};",""],"l":{"2":1,"3":1,"4":1,"36":1,"37":1,"38":4,"39":4,"40":4,"41":4,"42":4,"43":4,"49":1,"50":0,"51":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"61":0,"62":0,"64":0,"65":0,"67":0,"69":1,"71":4,"91":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/ds.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/ds.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":1,"17":1},"b":{"1":[1,1]},"f":{"1":1,"2":0,"3":1,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":1},"end":{"line":20,"column":22}}},"2":{"name":"isNumeric","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":26}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":11},"end":{"line":37,"column":23}}},"4":{"name":"Raw","line":44,"loc":{"start":{"line":44,"column":4},"end":{"line":44,"column":24}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":29},"end":{"line":51,"column":41}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":14}},"3":{"start":{"line":20,"column":0},"end":{"line":25,"column":62}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":48}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":52}},"6":{"start":{"line":23,"column":4},"end":{"line":23,"column":50}},"7":{"start":{"line":24,"column":4},"end":{"line":24,"column":52}},"8":{"start":{"line":26,"column":0},"end":{"line":28,"column":1}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":40}},"10":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}},"11":{"start":{"line":37,"column":0},"end":{"line":55,"column":5}},"12":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"13":{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},"14":{"start":{"line":51,"column":4},"end":{"line":53,"column":6}},"15":{"start":{"line":52,"column":8},"end":{"line":52,"column":26}},"16":{"start":{"line":54,"column":4},"end":{"line":54,"column":15}},"17":{"start":{"line":56,"column":0},"end":{"line":56,"column":18}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":15},"end":{"line":25,"column":32}},{"start":{"line":25,"column":37},"end":{"line":25,"column":59}}]}},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","/**"," * FieldType is an enumeration of InfluxDB field data types."," * @typedef {Number} FieldType"," * @example"," * import { FieldType } from 'influx'; // or const FieldType = require('influx').FieldType"," *"," * const schema = {"," *   measurement: 'my_measurement',"," *   fields: {"," *     my_int: FieldType.INTEGER,"," *     my_float: FieldType.FLOAT,"," *     my_string: FieldType.STRING,"," *     my_boolean: FieldType.BOOLEAN,"," *   }"," * }"," */","var FieldType;","(function (FieldType) {","    FieldType[FieldType[\"FLOAT\"] = 0] = \"FLOAT\";","    FieldType[FieldType[\"INTEGER\"] = 1] = \"INTEGER\";","    FieldType[FieldType[\"STRING\"] = 2] = \"STRING\";","    FieldType[FieldType[\"BOOLEAN\"] = 3] = \"BOOLEAN\";","})(FieldType = exports.FieldType || (exports.FieldType = {}));","function isNumeric(value) {","    return !Number.isNaN(Number(value));","}","exports.isNumeric = isNumeric;","/**"," * You can provide Raw values to Influx methods to prevent it from escaping"," * your provided string."," * @class"," * @example"," * influx.createDatabase(new Influx.Raw('This won\\'t be escaped!'));"," */","var Raw = (function () {","    /**","     * Wraps a string so that it is not escaped in Influx queries.","     * @param {String} value","     * @example","     * influx.createDatabase(new Influx.Raw('This won\\'t be escaped!'));","     */","    function Raw(value) {","        this.value = value;","    }","    /**","     * Returns the wrapped string.","     * @return {String}","     */","    Raw.prototype.getValue = function () {","        return this.value;","    };","    return Raw;","}());","exports.Raw = Raw;",""],"l":{"2":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"27":0,"29":1,"37":1,"44":1,"45":0,"51":1,"52":0,"54":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/times.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/grammar/times.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1,"21":1,"22":1,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":1,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":1,"76":0,"77":0,"78":0,"79":0,"80":1,"81":1,"82":1,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":1,"115":1,"116":1,"117":0,"118":0,"119":0,"120":0,"121":1,"122":1,"123":0,"124":0,"125":0,"126":0,"127":1,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":1,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0,0,0],"6":[0,0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0,0,0],"12":[0,0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"leftPad","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":35}}},"2":{"name":"rightPad","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":36}}},"3":{"name":"(anonymous_3)","line":71,"loc":{"start":{"line":71,"column":34},"end":{"line":71,"column":46}}},"4":{"name":"MillisecondDateManipulator","line":72,"loc":{"start":{"line":72,"column":4},"end":{"line":72,"column":42}}},"5":{"name":"(anonymous_5)","line":74,"loc":{"start":{"line":74,"column":50},"end":{"line":74,"column":66}}},"6":{"name":"(anonymous_6)","line":83,"loc":{"start":{"line":83,"column":50},"end":{"line":83,"column":77}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":53},"end":{"line":103,"column":74}}},"8":{"name":"(anonymous_8)","line":106,"loc":{"start":{"line":106,"column":54},"end":{"line":106,"column":86}}},"9":{"name":"nanoIsoToTime","line":131,"loc":{"start":{"line":131,"column":0},"end":{"line":131,"column":28}}},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":24},"end":{"line":144,"column":36}}},"11":{"name":"(anonymous_11)","line":150,"loc":{"start":{"line":150,"column":28},"end":{"line":150,"column":40}}},"12":{"name":"(anonymous_12)","line":157,"loc":{"start":{"line":157,"column":26},"end":{"line":157,"column":38}}},"13":{"name":"(anonymous_13)","line":160,"loc":{"start":{"line":160,"column":30},"end":{"line":160,"column":42}}},"14":{"name":"toNanoDate","line":186,"loc":{"start":{"line":186,"column":0},"end":{"line":186,"column":31}}},"15":{"name":"asNanoDate","line":194,"loc":{"start":{"line":194,"column":0},"end":{"line":194,"column":26}}},"16":{"name":"(anonymous_16)","line":201,"loc":{"start":{"line":201,"column":34},"end":{"line":201,"column":46}}},"17":{"name":"NanosecondsDateManipulator","line":202,"loc":{"start":{"line":202,"column":4},"end":{"line":202,"column":42}}},"18":{"name":"(anonymous_18)","line":204,"loc":{"start":{"line":204,"column":50},"end":{"line":204,"column":66}}},"19":{"name":"(anonymous_19)","line":213,"loc":{"start":{"line":213,"column":50},"end":{"line":213,"column":77}}},"20":{"name":"(anonymous_20)","line":232,"loc":{"start":{"line":232,"column":53},"end":{"line":232,"column":74}}},"21":{"name":"(anonymous_21)","line":239,"loc":{"start":{"line":239,"column":54},"end":{"line":239,"column":86}}},"22":{"name":"formatDate","line":269,"loc":{"start":{"line":269,"column":0},"end":{"line":269,"column":26}}},"23":{"name":"dateToTime","line":283,"loc":{"start":{"line":283,"column":0},"end":{"line":283,"column":37}}},"24":{"name":"isoOrTimeToDate","line":298,"loc":{"start":{"line":298,"column":0},"end":{"line":298,"column":43}}},"25":{"name":"castTimestamp","line":313,"loc":{"start":{"line":313,"column":0},"end":{"line":313,"column":45}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":32,"column":0},"end":{"line":41,"column":1}},"4":{"start":{"line":33,"column":4},"end":{"line":33,"column":38}},"5":{"start":{"line":33,"column":26},"end":{"line":33,"column":36}},"6":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":26}},"8":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":24}},"10":{"start":{"line":40,"column":4},"end":{"line":40,"column":15}},"11":{"start":{"line":42,"column":0},"end":{"line":51,"column":1}},"12":{"start":{"line":43,"column":4},"end":{"line":43,"column":38}},"13":{"start":{"line":43,"column":26},"end":{"line":43,"column":36}},"14":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"15":{"start":{"line":45,"column":8},"end":{"line":45,"column":26}},"16":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":19}},"18":{"start":{"line":50,"column":4},"end":{"line":50,"column":15}},"19":{"start":{"line":63,"column":0},"end":{"line":70,"column":3}},"20":{"start":{"line":71,"column":0},"end":{"line":126,"column":5}},"21":{"start":{"line":72,"column":4},"end":{"line":73,"column":5}},"22":{"start":{"line":74,"column":4},"end":{"line":82,"column":6}},"23":{"start":{"line":75,"column":8},"end":{"line":81,"column":64}},"24":{"start":{"line":83,"column":4},"end":{"line":102,"column":6}},"25":{"start":{"line":84,"column":8},"end":{"line":84,"column":32}},"26":{"start":{"line":85,"column":8},"end":{"line":101,"column":9}},"27":{"start":{"line":87,"column":16},"end":{"line":87,"column":27}},"28":{"start":{"line":89,"column":16},"end":{"line":89,"column":27}},"29":{"start":{"line":91,"column":16},"end":{"line":91,"column":34}},"30":{"start":{"line":93,"column":16},"end":{"line":93,"column":25}},"31":{"start":{"line":95,"column":16},"end":{"line":95,"column":25}},"32":{"start":{"line":97,"column":16},"end":{"line":97,"column":27}},"33":{"start":{"line":98,"column":16},"end":{"line":98,"column":46}},"34":{"start":{"line":100,"column":16},"end":{"line":100,"column":74}},"35":{"start":{"line":103,"column":4},"end":{"line":105,"column":6}},"36":{"start":{"line":104,"column":8},"end":{"line":104,"column":35}},"37":{"start":{"line":106,"column":4},"end":{"line":124,"column":6}},"38":{"start":{"line":107,"column":8},"end":{"line":123,"column":9}},"39":{"start":{"line":109,"column":16},"end":{"line":109,"column":34}},"40":{"start":{"line":111,"column":16},"end":{"line":111,"column":34}},"41":{"start":{"line":113,"column":16},"end":{"line":113,"column":43}},"42":{"start":{"line":115,"column":16},"end":{"line":115,"column":32}},"43":{"start":{"line":117,"column":16},"end":{"line":117,"column":32}},"44":{"start":{"line":119,"column":16},"end":{"line":119,"column":34}},"45":{"start":{"line":120,"column":16},"end":{"line":120,"column":43}},"46":{"start":{"line":122,"column":16},"end":{"line":122,"column":74}},"47":{"start":{"line":125,"column":4},"end":{"line":125,"column":38}},"48":{"start":{"line":127,"column":0},"end":{"line":130,"column":2}},"49":{"start":{"line":131,"column":0},"end":{"line":142,"column":1}},"50":{"start":{"line":132,"column":4},"end":{"line":132,"column":68}},"51":{"start":{"line":133,"column":4},"end":{"line":139,"column":5}},"52":{"start":{"line":134,"column":8},"end":{"line":134,"column":33}},"53":{"start":{"line":137,"column":8},"end":{"line":137,"column":58}},"54":{"start":{"line":138,"column":8},"end":{"line":138,"column":26}},"55":{"start":{"line":140,"column":4},"end":{"line":140,"column":68}},"56":{"start":{"line":141,"column":4},"end":{"line":141,"column":37}},"57":{"start":{"line":143,"column":0},"end":{"line":164,"column":2}},"58":{"start":{"line":145,"column":8},"end":{"line":147,"column":9}},"59":{"start":{"line":146,"column":12},"end":{"line":146,"column":64}},"60":{"start":{"line":148,"column":8},"end":{"line":148,"column":36}},"61":{"start":{"line":151,"column":8},"end":{"line":153,"column":9}},"62":{"start":{"line":152,"column":12},"end":{"line":152,"column":64}},"63":{"start":{"line":154,"column":8},"end":{"line":154,"column":51}},"64":{"start":{"line":155,"column":8},"end":{"line":155,"column":64}},"65":{"start":{"line":158,"column":8},"end":{"line":158,"column":30}},"66":{"start":{"line":161,"column":8},"end":{"line":161,"column":51}},"67":{"start":{"line":162,"column":8},"end":{"line":162,"column":58}},"68":{"start":{"line":186,"column":0},"end":{"line":192,"column":1}},"69":{"start":{"line":187,"column":4},"end":{"line":187,"column":66}},"70":{"start":{"line":188,"column":4},"end":{"line":188,"column":31}},"71":{"start":{"line":189,"column":4},"end":{"line":189,"column":60}},"72":{"start":{"line":190,"column":4},"end":{"line":190,"column":68}},"73":{"start":{"line":191,"column":4},"end":{"line":191,"column":16}},"74":{"start":{"line":193,"column":0},"end":{"line":193,"column":32}},"75":{"start":{"line":194,"column":0},"end":{"line":200,"column":1}},"76":{"start":{"line":195,"column":4},"end":{"line":195,"column":17}},"77":{"start":{"line":196,"column":4},"end":{"line":198,"column":5}},"78":{"start":{"line":197,"column":8},"end":{"line":197,"column":17}},"79":{"start":{"line":199,"column":4},"end":{"line":199,"column":21}},"80":{"start":{"line":201,"column":0},"end":{"line":262,"column":5}},"81":{"start":{"line":202,"column":4},"end":{"line":203,"column":5}},"82":{"start":{"line":204,"column":4},"end":{"line":212,"column":6}},"83":{"start":{"line":205,"column":8},"end":{"line":211,"column":55}},"84":{"start":{"line":213,"column":4},"end":{"line":231,"column":6}},"85":{"start":{"line":214,"column":8},"end":{"line":214,"column":32}},"86":{"start":{"line":215,"column":8},"end":{"line":230,"column":9}},"87":{"start":{"line":217,"column":16},"end":{"line":217,"column":55}},"88":{"start":{"line":219,"column":16},"end":{"line":219,"column":42}},"89":{"start":{"line":221,"column":16},"end":{"line":221,"column":25}},"90":{"start":{"line":223,"column":16},"end":{"line":223,"column":25}},"91":{"start":{"line":225,"column":16},"end":{"line":225,"column":27}},"92":{"start":{"line":227,"column":16},"end":{"line":227,"column":46}},"93":{"start":{"line":229,"column":16},"end":{"line":229,"column":74}},"94":{"start":{"line":232,"column":4},"end":{"line":238,"column":6}},"95":{"start":{"line":233,"column":8},"end":{"line":233,"column":39}},"96":{"start":{"line":234,"column":8},"end":{"line":234,"column":34}},"97":{"start":{"line":235,"column":8},"end":{"line":235,"column":62}},"98":{"start":{"line":236,"column":8},"end":{"line":236,"column":70}},"99":{"start":{"line":237,"column":8},"end":{"line":237,"column":20}},"100":{"start":{"line":239,"column":4},"end":{"line":260,"column":6}},"101":{"start":{"line":240,"column":8},"end":{"line":259,"column":9}},"102":{"start":{"line":242,"column":16},"end":{"line":242,"column":32}},"103":{"start":{"line":244,"column":16},"end":{"line":244,"column":32}},"104":{"start":{"line":246,"column":16},"end":{"line":246,"column":34}},"105":{"start":{"line":248,"column":16},"end":{"line":248,"column":34}},"106":{"start":{"line":250,"column":16},"end":{"line":250,"column":34}},"107":{"start":{"line":252,"column":16},"end":{"line":252,"column":58}},"108":{"start":{"line":253,"column":16},"end":{"line":253,"column":51}},"109":{"start":{"line":254,"column":16},"end":{"line":254,"column":72}},"110":{"start":{"line":255,"column":16},"end":{"line":255,"column":80}},"111":{"start":{"line":256,"column":16},"end":{"line":256,"column":28}},"112":{"start":{"line":258,"column":16},"end":{"line":258,"column":74}},"113":{"start":{"line":261,"column":4},"end":{"line":261,"column":38}},"114":{"start":{"line":263,"column":0},"end":{"line":263,"column":56}},"115":{"start":{"line":264,"column":0},"end":{"line":264,"column":55}},"116":{"start":{"line":269,"column":0},"end":{"line":277,"column":1}},"117":{"start":{"line":270,"column":4},"end":{"line":270,"column":32}},"118":{"start":{"line":271,"column":4},"end":{"line":276,"column":5}},"119":{"start":{"line":272,"column":8},"end":{"line":272,"column":44}},"120":{"start":{"line":275,"column":8},"end":{"line":275,"column":45}},"121":{"start":{"line":278,"column":0},"end":{"line":278,"column":32}},"122":{"start":{"line":283,"column":0},"end":{"line":291,"column":1}},"123":{"start":{"line":284,"column":4},"end":{"line":284,"column":32}},"124":{"start":{"line":285,"column":4},"end":{"line":290,"column":5}},"125":{"start":{"line":286,"column":8},"end":{"line":286,"column":55}},"126":{"start":{"line":289,"column":8},"end":{"line":289,"column":56}},"127":{"start":{"line":292,"column":0},"end":{"line":292,"column":32}},"128":{"start":{"line":298,"column":0},"end":{"line":306,"column":1}},"129":{"start":{"line":299,"column":4},"end":{"line":299,"column":50}},"130":{"start":{"line":299,"column":32},"end":{"line":299,"column":48}},"131":{"start":{"line":300,"column":4},"end":{"line":305,"column":5}},"132":{"start":{"line":301,"column":8},"end":{"line":301,"column":48}},"133":{"start":{"line":304,"column":8},"end":{"line":304,"column":60}},"134":{"start":{"line":307,"column":0},"end":{"line":307,"column":42}},"135":{"start":{"line":313,"column":0},"end":{"line":324,"column":1}},"136":{"start":{"line":314,"column":4},"end":{"line":319,"column":5}},"137":{"start":{"line":315,"column":8},"end":{"line":317,"column":9}},"138":{"start":{"line":316,"column":12},"end":{"line":316,"column":99}},"139":{"start":{"line":318,"column":8},"end":{"line":318,"column":25}},"140":{"start":{"line":320,"column":4},"end":{"line":322,"column":5}},"141":{"start":{"line":321,"column":8},"end":{"line":321,"column":33}},"142":{"start":{"line":323,"column":4},"end":{"line":323,"column":44}},"143":{"start":{"line":325,"column":0},"end":{"line":325,"column":38}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"5":{"line":85,"type":"switch","locations":[{"start":{"line":86,"column":12},"end":{"line":87,"column":27}},{"start":{"line":88,"column":12},"end":{"line":89,"column":27}},{"start":{"line":90,"column":12},"end":{"line":91,"column":34}},{"start":{"line":92,"column":12},"end":{"line":93,"column":25}},{"start":{"line":94,"column":12},"end":{"line":95,"column":25}},{"start":{"line":96,"column":12},"end":{"line":98,"column":46}},{"start":{"line":99,"column":12},"end":{"line":100,"column":74}}]},"6":{"line":107,"type":"switch","locations":[{"start":{"line":108,"column":12},"end":{"line":109,"column":34}},{"start":{"line":110,"column":12},"end":{"line":111,"column":34}},{"start":{"line":112,"column":12},"end":{"line":113,"column":43}},{"start":{"line":114,"column":12},"end":{"line":115,"column":32}},{"start":{"line":116,"column":12},"end":{"line":117,"column":32}},{"start":{"line":118,"column":12},"end":{"line":120,"column":43}},{"start":{"line":121,"column":12},"end":{"line":122,"column":74}}]},"7":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":133,"column":4}},{"start":{"line":133,"column":4},"end":{"line":133,"column":4}}]},"8":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":8},"end":{"line":145,"column":8}},{"start":{"line":145,"column":8},"end":{"line":145,"column":8}}]},"9":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":151,"column":8}},{"start":{"line":151,"column":8},"end":{"line":151,"column":8}}]},"10":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":196,"column":4}},{"start":{"line":196,"column":4},"end":{"line":196,"column":4}}]},"11":{"line":215,"type":"switch","locations":[{"start":{"line":216,"column":12},"end":{"line":217,"column":55}},{"start":{"line":218,"column":12},"end":{"line":219,"column":42}},{"start":{"line":220,"column":12},"end":{"line":221,"column":25}},{"start":{"line":222,"column":12},"end":{"line":223,"column":25}},{"start":{"line":224,"column":12},"end":{"line":225,"column":27}},{"start":{"line":226,"column":12},"end":{"line":227,"column":46}},{"start":{"line":228,"column":12},"end":{"line":229,"column":74}}]},"12":{"line":240,"type":"switch","locations":[{"start":{"line":241,"column":12},"end":{"line":242,"column":32}},{"start":{"line":243,"column":12},"end":{"line":244,"column":32}},{"start":{"line":245,"column":12},"end":{"line":246,"column":34}},{"start":{"line":247,"column":12},"end":{"line":248,"column":34}},{"start":{"line":249,"column":12},"end":{"line":250,"column":34}},{"start":{"line":251,"column":12},"end":{"line":256,"column":28}},{"start":{"line":257,"column":12},"end":{"line":258,"column":74}}]},"13":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":271,"column":4}},{"start":{"line":271,"column":4},"end":{"line":271,"column":4}}]},"14":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":4},"end":{"line":285,"column":4}},{"start":{"line":285,"column":4},"end":{"line":285,"column":4}}]},"15":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":4},"end":{"line":299,"column":4}},{"start":{"line":299,"column":4},"end":{"line":299,"column":4}}]},"16":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":300,"column":4}},{"start":{"line":300,"column":4},"end":{"line":300,"column":4}}]},"17":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":4},"end":{"line":314,"column":4}},{"start":{"line":314,"column":4},"end":{"line":314,"column":4}}]},"18":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":8},"end":{"line":315,"column":8}},{"start":{"line":315,"column":8},"end":{"line":315,"column":8}}]},"19":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":4},"end":{"line":320,"column":4}},{"start":{"line":320,"column":4},"end":{"line":320,"column":4}}]}},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","var ds_1 = require(\"./ds\");","/**"," * Just a quick overview of what's going on in this file. It's a bit of a mess."," * Influx uses three time formats:"," *  - ISO times with nanoseconds when querying where an epoch is not provided"," *  - Unix timestamps when querying with an epoch (specifying the precision"," *    in the given time unit)"," *  - Its own time format for time literals."," *"," * To complicate matters, Influx operates on nanosecond precisions"," * by default, but we can't represent nanosecond timestamps in"," * JavaScript numbers as they're 64 bit uints."," *"," * As a result we have several utilities to convert between these different"," * formats. When precision is required, we represent nanosecond timestamps"," * as strings and wrap default dates in the INanoDate interface which"," * lets the consumer read and write these more precise timestamps."," *"," * Representing the timestamps as strings is definitely not a pure way to go"," * about it, but importing an arbitrary-precision integer library adds"," * bloat and is a massive hit to throughput. The operations we do do"," * are pretty trivial, so we stick with manipulating strings"," * and make sure to wash our hands when we're done."," *"," * Vocabulary:"," *  Unix timestamp   = 'timestamp', abbreviated as 'time'"," *  ISO timestamp    = 'ISO time', abbreviated as 'ISO'"," *  Influx timestamp = 'Influx time', abbreviated as 'Influx'"," */","function leftPad(str, length, pad) {","    if (pad === void 0) { pad = '0'; }","    if (typeof str === 'number') {","        str = String(str);","    }","    while (str.length < length) {","        str = pad + str;","    }","    return str;","}","function rightPad(str, length, pad) {","    if (pad === void 0) { pad = '0'; }","    if (typeof str === 'number') {","        str = String(str);","    }","    while (str.length < length) {","        str += pad;","    }","    return str;","}","/**"," * Precision is a map of available Influx time precisions."," * @type {Object.<String, String>}"," * @example"," * console.log(Precision.Hours); // => 'h'"," * console.log(Precision.Minutes); // => 'm'"," * console.log(Precision.Seconds); // => 's'"," * console.log(Precision.Milliseconds); // => 'ms'"," * console.log(Precision.Microseconds); // => 'u'"," * console.log(Precision.Nanoseconds); // => 'ns'"," */","exports.Precision = Object.freeze({","    Hours: 'h',","    Microseconds: 'u',","    Milliseconds: 'ms',","    Minutes: 'm',","    Nanoseconds: 'n',","    Seconds: 's',","});","var MillisecondDateManipulator = (function () {","    function MillisecondDateManipulator() {","    }","    MillisecondDateManipulator.prototype.format = function (date) {","        return '\"' + leftPad(date.getUTCFullYear(), 2)","            + '-' + leftPad(date.getUTCMonth() + 1, 2)","            + '-' + leftPad(date.getUTCDate(), 2)","            + ' ' + leftPad(date.getUTCHours(), 2)","            + ':' + leftPad(date.getUTCMinutes(), 2)","            + ':' + leftPad(date.getUTCSeconds(), 2)","            + '.' + leftPad(date.getUTCMilliseconds(), 3) + '\"';","    };","    MillisecondDateManipulator.prototype.toTime = function (date, precision) {","        var ms = date.getTime();","        switch (precision) {","            case 'n':","                ms *= 1000;","            case 'u':","                ms *= 1000;","            case 'ms':","                return String(ms);","            case 'h':","                ms /= 60;","            case 'm':","                ms /= 60;","            case 's':","                ms /= 1000;","                return String(Math.floor(ms));","            default:","                throw new Error(\"Unknown precision '\" + precision + \"'!\");","        }","    };","    MillisecondDateManipulator.prototype.isoToDate = function (timestamp) {","        return new Date(timestamp);","    };","    MillisecondDateManipulator.prototype.timetoDate = function (timestamp, precision) {","        switch (precision) {","            case 'n':","                timestamp /= 1000;","            case 'u':","                timestamp /= 1000;","            case 'ms':","                return new Date(timestamp);","            case 'h':","                timestamp *= 60;","            case 'm':","                timestamp *= 60;","            case 's':","                timestamp *= 1000;","                return new Date(timestamp);","            default:","                throw new Error(\"Unknown precision '\" + precision + \"'!\");","        }","    };","    return MillisecondDateManipulator;","}());","var nsPer = {","    ms: Math.pow(10, 6),","    s: Math.pow(10, 9),","};","function nanoIsoToTime(iso) {","    var _a = iso.split('.'), secondsStr = _a[0], decimalStr = _a[1];","    if (decimalStr === undefined) {","        decimalStr = '000000000';","    }","    else {","        decimalStr = rightPad(decimalStr.slice(0, -1), 9);","        secondsStr += 'Z';","    }","    var seconds = Math.floor(new Date(secondsStr).getTime() / 1000);","    return \"\" + seconds + decimalStr;","}","var nanoDateMethods = {","    getNanoTimeFromISO: function () {","        if (!this._cachedNanoISO) {","            this._cachedNanoTime = nanoIsoToTime(this._nanoISO);","        }","        return this._cachedNanoTime;","    },","    toNanoISOStringFromISO: function () {","        if (!this._cachedNanoISO) {","            this._cachedNanoTime = nanoIsoToTime(this._nanoISO);","        }","        var base = this.toISOString().slice(0, -4); // slice of `123Z` milliseconds","        return \"\" + base + this._cachedNanoTime.slice(-9) + \"Z\";","    },","    getNanoTimeFromStamp: function () {","        return this._nanoTime;","    },","    toNanoISOStringFromStamp: function () {","        var base = this.toISOString().slice(0, -4); // slice of `123Z` milliseconds","        return \"\" + base + this._nanoTime.slice(-9) + \"Z\";","    },","};","/**"," * Covers a nanoseconds unix timestamp to a INanoDate for node-influx. The"," * timestamp is provided as a string to prevent precision loss."," *"," * Please see [A Moment for Times](https://node-influx.github.io/manual/"," * usage.html#a-moment-for-times) for a more complete and eloquent explanation"," * of time handling in this module."," *"," * @param {String} timestamp"," * @returns {INanoDate}"," * @example"," * const date = toNanoDate('1475985480231035600')"," *"," * // You can use the returned Date as a normal date:"," * expect(date.getTime()).to.equal(1475985480231);"," *"," * // We decorate it with two additional methods to read"," * // nanosecond-precision results:"," * expect(date.getNanoTime()).to.equal('1475985480231035600');"," * expect(date.toNanoISOString()).to.equal('2016-10-09T03:58:00.231035600Z');"," */","function toNanoDate(timestamp) {","    var date = new Date(Math.floor(Number(timestamp) / nsPer.ms));","    date._nanoTime = timestamp;","    date.getNanoTime = nanoDateMethods.getNanoTimeFromStamp;","    date.toNanoISOString = nanoDateMethods.toNanoISOStringFromStamp;","    return date;","}","exports.toNanoDate = toNanoDate;","function asNanoDate(date) {","    var d = date;","    if (d.getNanoTime) {","        return d;","    }","    return undefined;","}","var NanosecondsDateManipulator = (function () {","    function NanosecondsDateManipulator() {","    }","    NanosecondsDateManipulator.prototype.format = function (date) {","        return '\"' + leftPad(date.getUTCFullYear(), 2)","            + '-' + leftPad(date.getUTCMonth() + 1, 2)","            + '-' + leftPad(date.getUTCDate(), 2)","            + ' ' + leftPad(date.getUTCHours(), 2)","            + ':' + leftPad(date.getUTCMinutes(), 2)","            + ':' + leftPad(date.getUTCSeconds(), 2)","            + '.' + date.getNanoTime().slice(-9) + '\"';","    };","    NanosecondsDateManipulator.prototype.toTime = function (date, precision) {","        var ms = date.getTime();","        switch (precision) {","            case 'u':","                return date.getNanoTime().slice(0, -3);","            case 'n':","                return date.getNanoTime();","            case 'h':","                ms /= 60;","            case 'm':","                ms /= 60;","            case 's':","                ms /= 1000;","            case 'ms':","                return String(Math.floor(ms));","            default:","                throw new Error(\"Unknown precision '\" + precision + \"'!\");","        }","    };","    NanosecondsDateManipulator.prototype.isoToDate = function (timestamp) {","        var date = new Date(timestamp);","        date._nanoISO = timestamp;","        date.getNanoTime = nanoDateMethods.getNanoTimeFromISO;","        date.toNanoISOString = nanoDateMethods.toNanoISOStringFromISO;","        return date;","    };","    NanosecondsDateManipulator.prototype.timetoDate = function (timestamp, precision) {","        switch (precision) {","            case 'h':","                timestamp *= 60;","            case 'm':","                timestamp *= 60;","            case 's':","                timestamp *= 1000;","            case 'ms':","                timestamp *= 1000;","            case 'u':","                timestamp *= 1000;","            case 'n':","                var date = new Date(timestamp / nsPer.ms);","                date._nanoTime = String(timestamp);","                date.getNanoTime = nanoDateMethods.getNanoTimeFromStamp;","                date.toNanoISOString = nanoDateMethods.toNanoISOStringFromStamp;","                return date;","            default:","                throw new Error(\"Unknown precision '\" + precision + \"'!\");","        }","    };","    return NanosecondsDateManipulator;","}());","var milliManipulator = new MillisecondDateManipulator();","var nanoManipulator = new NanosecondsDateManipulator();","/**"," * formatDate converts the Date instance to Influx's date query format."," * @private"," */","function formatDate(date) {","    var nano = asNanoDate(date);","    if (nano) {","        return nanoManipulator.format(nano);","    }","    else {","        return milliManipulator.format(date);","    }","}","exports.formatDate = formatDate;","/**"," * Converts a Date instance to a timestamp with the specified time precision."," * @private"," */","function dateToTime(date, precision) {","    var nano = asNanoDate(date);","    if (nano) {","        return nanoManipulator.toTime(nano, precision);","    }","    else {","        return milliManipulator.toTime(date, precision);","    }","}","exports.dateToTime = dateToTime;","/**"," * Converts an ISO-formatted data or unix timestamp to a Date instance. If"," * the precision is finer than 'ms' the returned value will be a INanoDate."," * @private"," */","function isoOrTimeToDate(stamp, precision) {","    if (precision === void 0) { precision = 'n'; }","    if (typeof stamp === 'string') {","        return nanoManipulator.isoToDate(stamp);","    }","    else {","        return nanoManipulator.timetoDate(stamp, precision);","    }","}","exports.isoOrTimeToDate = isoOrTimeToDate;","/**"," * Converts a timestamp to a string with the correct precision. Assumes"," * that raw number and string instances are already in the correct precision."," * @private"," */","function castTimestamp(timestamp, precision) {","    if (typeof timestamp === 'string') {","        if (!ds_1.isNumeric(timestamp)) {","            throw new Error(\"Expected numeric value for, timestamp, but got '\" + timestamp + \"'!\");","        }","        return timestamp;","    }","    if (typeof timestamp === 'number') {","        return String(timestamp);","    }","    return dateToTime(timestamp, precision);","}","exports.castTimestamp = castTimestamp;",""],"l":{"2":1,"3":1,"32":1,"33":0,"34":0,"35":0,"37":0,"38":0,"40":0,"42":1,"43":0,"44":0,"45":0,"47":0,"48":0,"50":0,"63":1,"71":1,"72":1,"74":1,"75":0,"83":1,"84":0,"85":0,"87":0,"89":0,"91":0,"93":0,"95":0,"97":0,"98":0,"100":0,"103":1,"104":0,"106":1,"107":0,"109":0,"111":0,"113":0,"115":0,"117":0,"119":0,"120":0,"122":0,"125":1,"127":1,"131":1,"132":0,"133":0,"134":0,"137":0,"138":0,"140":0,"141":0,"143":1,"145":0,"146":0,"148":0,"151":0,"152":0,"154":0,"155":0,"158":0,"161":0,"162":0,"186":1,"187":0,"188":0,"189":0,"190":0,"191":0,"193":1,"194":1,"195":0,"196":0,"197":0,"199":0,"201":1,"202":1,"204":1,"205":0,"213":1,"214":0,"215":0,"217":0,"219":0,"221":0,"223":0,"225":0,"227":0,"229":0,"232":1,"233":0,"234":0,"235":0,"236":0,"237":0,"239":1,"240":0,"242":0,"244":0,"246":0,"248":0,"250":0,"252":0,"253":0,"254":0,"255":0,"256":0,"258":0,"261":1,"263":1,"264":1,"269":1,"270":0,"271":0,"272":0,"275":0,"278":1,"283":1,"284":0,"285":0,"286":0,"289":0,"292":1,"298":1,"299":0,"300":0,"301":0,"304":0,"307":1,"313":1,"314":0,"315":0,"316":0,"318":0,"320":0,"321":0,"323":0,"325":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/pool.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/pool.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":2,"9":1,"10":2,"11":2,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1,"29":1,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":1,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":1,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":1,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":1,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":1,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":1,"155":0,"156":0,"157":1,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":1,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":1,"174":1},"b":{"1":[1,1,1],"2":[1,0,0,0],"3":[0,0],"4":[0,2],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":1,"2":0,"3":0,"4":2,"5":2,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},"fnMap":{"1":{"name":"(anonymous_1)","line":2,"loc":{"start":{"line":2,"column":45},"end":{"line":2,"column":57}}},"2":{"name":"(anonymous_2)","line":4,"loc":{"start":{"line":4,"column":47},"end":{"line":4,"column":63}}},"3":{"name":"(anonymous_3)","line":5,"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":24}}},"4":{"name":"(anonymous_4)","line":6,"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":27}}},"5":{"name":"__","line":8,"loc":{"start":{"line":8,"column":8},"end":{"line":8,"column":22}}},"6":{"name":"(anonymous_6)","line":34,"loc":{"start":{"line":34,"column":32},"end":{"line":34,"column":50}}},"7":{"name":"ServiceNotAvailableError","line":36,"loc":{"start":{"line":36,"column":4},"end":{"line":36,"column":47}}},"8":{"name":"(anonymous_8)","line":49,"loc":{"start":{"line":49,"column":20},"end":{"line":49,"column":38}}},"9":{"name":"RequestError","line":51,"loc":{"start":{"line":51,"column":4},"end":{"line":51,"column":42}}},"10":{"name":"(anonymous_10)","line":59,"loc":{"start":{"line":59,"column":26},"end":{"line":59,"column":56}}},"11":{"name":"(anonymous_11)","line":61,"loc":{"start":{"line":61,"column":23},"end":{"line":61,"column":38}}},"12":{"name":"(anonymous_12)","line":62,"loc":{"start":{"line":62,"column":22},"end":{"line":62,"column":34}}},"13":{"name":"doOnce","line":71,"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":18}}},"14":{"name":"(anonymous_14)","line":73,"loc":{"start":{"line":73,"column":11},"end":{"line":73,"column":25}}},"15":{"name":"(anonymous_15)","line":74,"loc":{"start":{"line":74,"column":15},"end":{"line":74,"column":30}}},"16":{"name":"setToArray","line":83,"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":29}}},"17":{"name":"(anonymous_17)","line":85,"loc":{"start":{"line":85,"column":20},"end":{"line":85,"column":37}}},"18":{"name":"(anonymous_18)","line":90,"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":43}}},"19":{"name":"(anonymous_19)","line":104,"loc":{"start":{"line":104,"column":12},"end":{"line":104,"column":24}}},"20":{"name":"Pool","line":109,"loc":{"start":{"line":109,"column":4},"end":{"line":109,"column":27}}},"21":{"name":"(anonymous_21)","line":128,"loc":{"start":{"line":128,"column":39},"end":{"line":128,"column":51}}},"22":{"name":"(anonymous_22)","line":136,"loc":{"start":{"line":136,"column":38},"end":{"line":136,"column":50}}},"23":{"name":"(anonymous_23)","line":142,"loc":{"start":{"line":142,"column":29},"end":{"line":142,"column":53}}},"24":{"name":"(anonymous_24)","line":152,"loc":{"start":{"line":152,"column":37},"end":{"line":152,"column":49}}},"25":{"name":"(anonymous_25)","line":159,"loc":{"start":{"line":159,"column":26},"end":{"line":159,"column":45}}},"26":{"name":"(anonymous_26)","line":160,"loc":{"start":{"line":160,"column":39},"end":{"line":160,"column":54}}},"27":{"name":"(anonymous_27)","line":166,"loc":{"start":{"line":166,"column":26},"end":{"line":166,"column":45}}},"28":{"name":"(anonymous_28)","line":168,"loc":{"start":{"line":168,"column":27},"end":{"line":168,"column":54}}},"29":{"name":"(anonymous_29)","line":169,"loc":{"start":{"line":169,"column":34},"end":{"line":169,"column":54}}},"30":{"name":"(anonymous_30)","line":174,"loc":{"start":{"line":174,"column":31},"end":{"line":174,"column":46}}},"31":{"name":"(anonymous_31)","line":175,"loc":{"start":{"line":175,"column":30},"end":{"line":175,"column":42}}},"32":{"name":"(anonymous_32)","line":183,"loc":{"start":{"line":183,"column":29},"end":{"line":183,"column":48}}},"33":{"name":"(anonymous_33)","line":185,"loc":{"start":{"line":185,"column":27},"end":{"line":185,"column":54}}},"34":{"name":"(anonymous_34)","line":186,"loc":{"start":{"line":186,"column":34},"end":{"line":186,"column":54}}},"35":{"name":"(anonymous_35)","line":190,"loc":{"start":{"line":190,"column":31},"end":{"line":190,"column":43}}},"36":{"name":"(anonymous_36)","line":191,"loc":{"start":{"line":191,"column":30},"end":{"line":191,"column":42}}},"37":{"name":"(anonymous_37)","line":199,"loc":{"start":{"line":199,"column":26},"end":{"line":199,"column":51}}},"38":{"name":"(anonymous_38)","line":204,"loc":{"start":{"line":204,"column":21},"end":{"line":204,"column":37}}},"39":{"name":"(anonymous_39)","line":208,"loc":{"start":{"line":208,"column":41},"end":{"line":208,"column":60}}},"40":{"name":"(anonymous_40)","line":216,"loc":{"start":{"line":216,"column":39},"end":{"line":216,"column":54}}},"41":{"name":"(anonymous_41)","line":225,"loc":{"start":{"line":225,"column":32},"end":{"line":225,"column":44}}},"42":{"name":"(anonymous_42)","line":251,"loc":{"start":{"line":251,"column":28},"end":{"line":251,"column":57}}},"43":{"name":"(anonymous_43)","line":270,"loc":{"start":{"line":270,"column":31},"end":{"line":270,"column":46}}},"44":{"name":"(anonymous_44)","line":275,"loc":{"start":{"line":275,"column":53},"end":{"line":275,"column":68}}},"45":{"name":"(anonymous_45)","line":281,"loc":{"start":{"line":281,"column":29},"end":{"line":281,"column":44}}},"46":{"name":"(anonymous_46)","line":285,"loc":{"start":{"line":285,"column":31},"end":{"line":285,"column":43}}},"47":{"name":"(anonymous_47)","line":304,"loc":{"start":{"line":304,"column":29},"end":{"line":304,"column":41}}},"48":{"name":"(anonymous_48)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":48}}},"49":{"name":"(anonymous_49)","line":322,"loc":{"start":{"line":322,"column":33},"end":{"line":322,"column":49}}},"50":{"name":"(anonymous_50)","line":327,"loc":{"start":{"line":327,"column":19},"end":{"line":327,"column":31}}},"51":{"name":"(anonymous_51)","line":329,"loc":{"start":{"line":329,"column":40},"end":{"line":329,"column":80}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":11,"column":5}},"2":{"start":{"line":3,"column":4},"end":{"line":5,"column":83}},"3":{"start":{"line":4,"column":65},"end":{"line":4,"column":81}},"4":{"start":{"line":5,"column":26},"end":{"line":5,"column":80}},"5":{"start":{"line":5,"column":43},"end":{"line":5,"column":80}},"6":{"start":{"line":5,"column":68},"end":{"line":5,"column":80}},"7":{"start":{"line":6,"column":4},"end":{"line":10,"column":6}},"8":{"start":{"line":7,"column":8},"end":{"line":7,"column":28}},"9":{"start":{"line":8,"column":8},"end":{"line":8,"column":47}},"10":{"start":{"line":8,"column":24},"end":{"line":8,"column":45}},"11":{"start":{"line":9,"column":8},"end":{"line":9,"column":93}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":53}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":31}},"15":{"start":{"line":15,"column":0},"end":{"line":15,"column":27}},"16":{"start":{"line":16,"column":0},"end":{"line":16,"column":29}},"17":{"start":{"line":17,"column":0},"end":{"line":17,"column":41}},"18":{"start":{"line":23,"column":0},"end":{"line":29,"column":2}},"19":{"start":{"line":34,"column":0},"end":{"line":43,"column":10}},"20":{"start":{"line":35,"column":4},"end":{"line":35,"column":48}},"21":{"start":{"line":36,"column":4},"end":{"line":41,"column":5}},"22":{"start":{"line":37,"column":8},"end":{"line":37,"column":46}},"23":{"start":{"line":38,"column":8},"end":{"line":38,"column":32}},"24":{"start":{"line":39,"column":8},"end":{"line":39,"column":73}},"25":{"start":{"line":40,"column":8},"end":{"line":40,"column":21}},"26":{"start":{"line":42,"column":4},"end":{"line":42,"column":36}},"27":{"start":{"line":44,"column":0},"end":{"line":44,"column":60}},"28":{"start":{"line":49,"column":0},"end":{"line":65,"column":10}},"29":{"start":{"line":50,"column":4},"end":{"line":50,"column":36}},"30":{"start":{"line":51,"column":4},"end":{"line":58,"column":5}},"31":{"start":{"line":52,"column":8},"end":{"line":52,"column":46}},"32":{"start":{"line":53,"column":8},"end":{"line":53,"column":24}},"33":{"start":{"line":54,"column":8},"end":{"line":54,"column":24}},"34":{"start":{"line":55,"column":8},"end":{"line":55,"column":101}},"35":{"start":{"line":56,"column":8},"end":{"line":56,"column":61}},"36":{"start":{"line":57,"column":8},"end":{"line":57,"column":21}},"37":{"start":{"line":59,"column":4},"end":{"line":63,"column":6}},"38":{"start":{"line":60,"column":8},"end":{"line":60,"column":22}},"39":{"start":{"line":61,"column":8},"end":{"line":61,"column":80}},"40":{"start":{"line":61,"column":40},"end":{"line":61,"column":76}},"41":{"start":{"line":62,"column":8},"end":{"line":62,"column":90}},"42":{"start":{"line":62,"column":36},"end":{"line":62,"column":86}},"43":{"start":{"line":64,"column":4},"end":{"line":64,"column":24}},"44":{"start":{"line":66,"column":0},"end":{"line":66,"column":36}},"45":{"start":{"line":71,"column":0},"end":{"line":82,"column":1}},"46":{"start":{"line":72,"column":4},"end":{"line":72,"column":24}},"47":{"start":{"line":73,"column":4},"end":{"line":81,"column":6}},"48":{"start":{"line":74,"column":8},"end":{"line":80,"column":10}},"49":{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},"50":{"start":{"line":76,"column":16},"end":{"line":76,"column":23}},"51":{"start":{"line":78,"column":12},"end":{"line":78,"column":27}},"52":{"start":{"line":79,"column":12},"end":{"line":79,"column":20}},"53":{"start":{"line":83,"column":0},"end":{"line":89,"column":1}},"54":{"start":{"line":84,"column":4},"end":{"line":84,"column":20}},"55":{"start":{"line":85,"column":4},"end":{"line":87,"column":7}},"56":{"start":{"line":86,"column":8},"end":{"line":86,"column":27}},"57":{"start":{"line":88,"column":4},"end":{"line":88,"column":18}},"58":{"start":{"line":90,"column":0},"end":{"line":97,"column":2}},"59":{"start":{"line":91,"column":4},"end":{"line":96,"column":5}},"60":{"start":{"line":92,"column":8},"end":{"line":92,"column":48}},"61":{"start":{"line":95,"column":8},"end":{"line":95,"column":47}},"62":{"start":{"line":104,"column":0},"end":{"line":343,"column":5}},"63":{"start":{"line":109,"column":4},"end":{"line":123,"column":5}},"64":{"start":{"line":110,"column":8},"end":{"line":118,"column":20}},"65":{"start":{"line":119,"column":8},"end":{"line":119,"column":23}},"66":{"start":{"line":120,"column":8},"end":{"line":120,"column":40}},"67":{"start":{"line":121,"column":8},"end":{"line":121,"column":39}},"68":{"start":{"line":122,"column":8},"end":{"line":122,"column":51}},"69":{"start":{"line":128,"column":4},"end":{"line":130,"column":6}},"70":{"start":{"line":129,"column":8},"end":{"line":129,"column":47}},"71":{"start":{"line":136,"column":4},"end":{"line":138,"column":6}},"72":{"start":{"line":137,"column":8},"end":{"line":137,"column":46}},"73":{"start":{"line":142,"column":4},"end":{"line":147,"column":6}},"74":{"start":{"line":143,"column":8},"end":{"line":143,"column":49}},"75":{"start":{"line":143,"column":34},"end":{"line":143,"column":47}},"76":{"start":{"line":144,"column":8},"end":{"line":144,"column":79}},"77":{"start":{"line":145,"column":8},"end":{"line":145,"column":38}},"78":{"start":{"line":146,"column":8},"end":{"line":146,"column":20}},"79":{"start":{"line":152,"column":4},"end":{"line":154,"column":6}},"80":{"start":{"line":153,"column":8},"end":{"line":153,"column":44}},"81":{"start":{"line":159,"column":4},"end":{"line":161,"column":6}},"82":{"start":{"line":160,"column":8},"end":{"line":160,"column":83}},"83":{"start":{"line":160,"column":56},"end":{"line":160,"column":79}},"84":{"start":{"line":166,"column":4},"end":{"line":178,"column":6}},"85":{"start":{"line":167,"column":8},"end":{"line":167,"column":25}},"86":{"start":{"line":168,"column":8},"end":{"line":177,"column":11}},"87":{"start":{"line":169,"column":12},"end":{"line":176,"column":15}},"88":{"start":{"line":170,"column":16},"end":{"line":172,"column":17}},"89":{"start":{"line":171,"column":20},"end":{"line":171,"column":39}},"90":{"start":{"line":173,"column":16},"end":{"line":173,"column":32}},"91":{"start":{"line":174,"column":16},"end":{"line":174,"column":92}},"92":{"start":{"line":174,"column":48},"end":{"line":174,"column":88}},"93":{"start":{"line":175,"column":16},"end":{"line":175,"column":71}},"94":{"start":{"line":175,"column":44},"end":{"line":175,"column":67}},"95":{"start":{"line":183,"column":4},"end":{"line":194,"column":6}},"96":{"start":{"line":184,"column":8},"end":{"line":184,"column":25}},"97":{"start":{"line":185,"column":8},"end":{"line":193,"column":11}},"98":{"start":{"line":186,"column":12},"end":{"line":192,"column":15}},"99":{"start":{"line":187,"column":16},"end":{"line":189,"column":17}},"100":{"start":{"line":188,"column":20},"end":{"line":188,"column":39}},"101":{"start":{"line":190,"column":16},"end":{"line":190,"column":48}},"102":{"start":{"line":191,"column":16},"end":{"line":191,"column":65}},"103":{"start":{"line":191,"column":44},"end":{"line":191,"column":61}},"104":{"start":{"line":199,"column":4},"end":{"line":246,"column":6}},"105":{"start":{"line":200,"column":8},"end":{"line":200,"column":48}},"106":{"start":{"line":200,"column":31},"end":{"line":200,"column":46}},"107":{"start":{"line":201,"column":8},"end":{"line":201,"column":22}},"108":{"start":{"line":202,"column":8},"end":{"line":244,"column":11}},"109":{"start":{"line":205,"column":12},"end":{"line":205,"column":35}},"110":{"start":{"line":206,"column":12},"end":{"line":206,"column":31}},"111":{"start":{"line":207,"column":12},"end":{"line":207,"column":32}},"112":{"start":{"line":208,"column":12},"end":{"line":243,"column":16}},"113":{"start":{"line":209,"column":16},"end":{"line":224,"column":20}},"114":{"start":{"line":217,"column":20},"end":{"line":223,"column":23}},"115":{"start":{"line":225,"column":16},"end":{"line":233,"column":19}},"116":{"start":{"line":226,"column":20},"end":{"line":232,"column":23}},"117":{"start":{"line":237,"column":16},"end":{"line":239,"column":17}},"118":{"start":{"line":238,"column":20},"end":{"line":238,"column":50}},"119":{"start":{"line":240,"column":16},"end":{"line":240,"column":40}},"120":{"start":{"line":241,"column":16},"end":{"line":241,"column":38}},"121":{"start":{"line":242,"column":16},"end":{"line":242,"column":26}},"122":{"start":{"line":245,"column":8},"end":{"line":245,"column":33}},"123":{"start":{"line":251,"column":4},"end":{"line":299,"column":6}},"124":{"start":{"line":252,"column":8},"end":{"line":252,"column":25}},"125":{"start":{"line":253,"column":8},"end":{"line":255,"column":9}},"126":{"start":{"line":254,"column":12},"end":{"line":254,"column":85}},"127":{"start":{"line":256,"column":8},"end":{"line":256,"column":32}},"128":{"start":{"line":257,"column":8},"end":{"line":259,"column":9}},"129":{"start":{"line":258,"column":12},"end":{"line":258,"column":63}},"130":{"start":{"line":260,"column":8},"end":{"line":260,"column":28}},"131":{"start":{"line":261,"column":8},"end":{"line":261,"column":34}},"132":{"start":{"line":262,"column":8},"end":{"line":279,"column":12}},"133":{"start":{"line":271,"column":12},"end":{"line":273,"column":13}},"134":{"start":{"line":272,"column":16},"end":{"line":272,"column":122}},"135":{"start":{"line":274,"column":12},"end":{"line":276,"column":13}},"136":{"start":{"line":275,"column":16},"end":{"line":275,"column":100}},"137":{"start":{"line":275,"column":70},"end":{"line":275,"column":96}},"138":{"start":{"line":277,"column":12},"end":{"line":277,"column":27}},"139":{"start":{"line":278,"column":12},"end":{"line":278,"column":44}},"140":{"start":{"line":281,"column":8},"end":{"line":283,"column":12}},"141":{"start":{"line":282,"column":12},"end":{"line":282,"column":67}},"142":{"start":{"line":285,"column":8},"end":{"line":287,"column":12}},"143":{"start":{"line":286,"column":12},"end":{"line":286,"column":113}},"144":{"start":{"line":291,"column":8},"end":{"line":293,"column":9}},"145":{"start":{"line":292,"column":12},"end":{"line":292,"column":41}},"146":{"start":{"line":295,"column":8},"end":{"line":297,"column":9}},"147":{"start":{"line":296,"column":12},"end":{"line":296,"column":36}},"148":{"start":{"line":298,"column":8},"end":{"line":298,"column":18}},"149":{"start":{"line":304,"column":4},"end":{"line":309,"column":6}},"150":{"start":{"line":305,"column":8},"end":{"line":305,"column":56}},"151":{"start":{"line":306,"column":8},"end":{"line":306,"column":41}},"152":{"start":{"line":307,"column":8},"end":{"line":307,"column":57}},"153":{"start":{"line":308,"column":8},"end":{"line":308,"column":20}},"154":{"start":{"line":314,"column":4},"end":{"line":317,"column":6}},"155":{"start":{"line":315,"column":8},"end":{"line":315,"column":40}},"156":{"start":{"line":316,"column":8},"end":{"line":316,"column":38}},"157":{"start":{"line":322,"column":4},"end":{"line":328,"column":6}},"158":{"start":{"line":323,"column":8},"end":{"line":323,"column":25}},"159":{"start":{"line":324,"column":8},"end":{"line":324,"column":41}},"160":{"start":{"line":325,"column":8},"end":{"line":325,"column":37}},"161":{"start":{"line":326,"column":8},"end":{"line":326,"column":60}},"162":{"start":{"line":327,"column":8},"end":{"line":327,"column":80}},"163":{"start":{"line":327,"column":33},"end":{"line":327,"column":63}},"164":{"start":{"line":329,"column":4},"end":{"line":341,"column":6}},"165":{"start":{"line":330,"column":8},"end":{"line":333,"column":9}},"166":{"start":{"line":332,"column":12},"end":{"line":332,"column":39}},"167":{"start":{"line":334,"column":8},"end":{"line":334,"column":31}},"168":{"start":{"line":335,"column":8},"end":{"line":335,"column":43}},"169":{"start":{"line":336,"column":8},"end":{"line":339,"column":9}},"170":{"start":{"line":337,"column":12},"end":{"line":337,"column":42}},"171":{"start":{"line":338,"column":12},"end":{"line":338,"column":50}},"172":{"start":{"line":340,"column":8},"end":{"line":340,"column":28}},"173":{"start":{"line":342,"column":4},"end":{"line":342,"column":16}},"174":{"start":{"line":344,"column":0},"end":{"line":344,"column":20}}},"branchMap":{"1":{"line":2,"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":11,"column":4}}]},"2":{"line":3,"type":"binary-expr","locations":[{"start":{"line":3,"column":24},"end":{"line":3,"column":45}},{"start":{"line":4,"column":9},"end":{"line":4,"column":43}},{"start":{"line":4,"column":47},"end":{"line":4,"column":83}},{"start":{"line":5,"column":8},"end":{"line":5,"column":82}}]},"3":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":43},"end":{"line":5,"column":43}},{"start":{"line":5,"column":43},"end":{"line":5,"column":43}}]},"4":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":35},"end":{"line":9,"column":51}},{"start":{"line":9,"column":55},"end":{"line":9,"column":91}}]},"5":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":20},"end":{"line":37,"column":37}},{"start":{"line":37,"column":41},"end":{"line":37,"column":45}}]},"6":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":20},"end":{"line":52,"column":37}},{"start":{"line":52,"column":41},"end":{"line":52,"column":45}}]},"7":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":12}},{"start":{"line":75,"column":12},"end":{"line":75,"column":12}}]},"8":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"9":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"10":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":16},"end":{"line":170,"column":16}},{"start":{"line":170,"column":16},"end":{"line":170,"column":16}}]},"11":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":16},"end":{"line":187,"column":16}},{"start":{"line":187,"column":16},"end":{"line":187,"column":16}}]},"12":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":8},"end":{"line":200,"column":8}},{"start":{"line":200,"column":8},"end":{"line":200,"column":8}}]},"13":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":16},"end":{"line":237,"column":16}},{"start":{"line":237,"column":16},"end":{"line":237,"column":16}}]},"14":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":8}},{"start":{"line":253,"column":8},"end":{"line":253,"column":8}}]},"15":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":8},"end":{"line":257,"column":8}},{"start":{"line":257,"column":8},"end":{"line":257,"column":8}}]},"16":{"line":263,"type":"cond-expr","locations":[{"start":{"line":263,"column":56},"end":{"line":263,"column":87}},{"start":{"line":263,"column":90},"end":{"line":263,"column":91}}]},"17":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":12},"end":{"line":271,"column":12}},{"start":{"line":271,"column":12},"end":{"line":271,"column":12}}]},"18":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":12},"end":{"line":274,"column":12}},{"start":{"line":274,"column":12},"end":{"line":274,"column":12}}]},"19":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":8},"end":{"line":291,"column":8}},{"start":{"line":291,"column":8},"end":{"line":291,"column":8}}]},"20":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":8},"end":{"line":295,"column":8}},{"start":{"line":295,"column":8},"end":{"line":295,"column":8}}]},"21":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":8},"end":{"line":330,"column":8}},{"start":{"line":330,"column":8},"end":{"line":330,"column":8}}]},"22":{"line":330,"type":"binary-expr","locations":[{"start":{"line":330,"column":12},"end":{"line":330,"column":54}},{"start":{"line":331,"column":12},"end":{"line":331,"column":55}}]},"23":{"line":335,"type":"binary-expr","locations":[{"start":{"line":335,"column":22},"end":{"line":335,"column":37}},{"start":{"line":335,"column":41},"end":{"line":335,"column":42}}]},"24":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":8}},{"start":{"line":336,"column":8},"end":{"line":336,"column":8}}]},"25":{"line":336,"type":"binary-expr","locations":[{"start":{"line":336,"column":12},"end":{"line":336,"column":45}},{"start":{"line":336,"column":49},"end":{"line":336,"column":71}}]}},"code":["\"use strict\";","var __extends = (this && this.__extends) || (function () {","    var extendStatics = Object.setPrototypeOf ||","        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||","        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };","    return function (d, b) {","        extendStatics(d, b);","        function __() { this.constructor = d; }","        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());","    };","})();","Object.defineProperty(exports, \"__esModule\", { value: true });","var exponential_1 = require(\"./backoff/exponential\");","var host_1 = require(\"./host\");","var http = require(\"http\");","var https = require(\"https\");","var querystring = require(\"querystring\");","/**"," * Status codes that will cause a host to be marked as 'failed' if we get"," * them from a request to Influx."," * @type {Array}"," */","var resubmitErrorCodes = [","    'ETIMEDOUT',","    'ESOCKETTIMEDOUT',","    'ECONNRESET',","    'ECONNREFUSED',","    'EHOSTUNREACH',","];","/**"," * An ServiceNotAvailableError is returned as an error from requests that"," * result in a > 500 error code."," */","var ServiceNotAvailableError = (function (_super) {","    __extends(ServiceNotAvailableError, _super);","    function ServiceNotAvailableError(message) {","        var _this = _super.call(this) || this;","        _this.message = message;","        Object.setPrototypeOf(_this, ServiceNotAvailableError.prototype);","        return _this;","    }","    return ServiceNotAvailableError;","}(Error));","exports.ServiceNotAvailableError = ServiceNotAvailableError;","/**"," * An RequestError is returned as an error from requests that"," * result in a 300 <= error code <= 500."," */","var RequestError = (function (_super) {","    __extends(RequestError, _super);","    function RequestError(req, res, body) {","        var _this = _super.call(this) || this;","        _this.req = req;","        _this.res = res;","        _this.message = \"A \" + res.statusCode + \" \" + res.statusMessage + \" error occurred: \" + body;","        Object.setPrototypeOf(_this, RequestError.prototype);","        return _this;","    }","    RequestError.Create = function (req, res, callback) {","        var body = '';","        res.on('data', function (str) { return body = body + str.toString(); });","        res.on('end', function () { return callback(new RequestError(req, res, body)); });","    };","    return RequestError;","}(Error));","exports.RequestError = RequestError;","/**"," * Creates a function generation that returns a wrapper which only allows"," * through the first call of any function that it generated."," */","function doOnce() {","    var handled = false;","    return function (fn) {","        return function (arg) {","            if (handled) {","                return;","            }","            handled = true;","            fn(arg);","        };","    };","}","function setToArray(itemSet) {","    var output = [];","    itemSet.forEach(function (value) {","        output.push(value);","    });","    return output;","}","var request = function (options, callback) {","    if (options.protocol === 'https:') {","        return https.request(options, callback);","    }","    else {","        return http.request(options, callback);","    }","};","/**"," *"," * The Pool maintains a list available Influx hosts and dispatches requests"," * to them. If there are errors connecting to hosts, it will disable that"," * host for a period of time."," */","var Pool = (function () {","    /**","     * Creates a new Pool instance.","     * @param {IPoolOptions} options","     */","    function Pool(options) {","        this.options = Object.assign({","            backoff: new exponential_1.ExponentialBackoff({","                initial: 300,","                max: 10 * 1000,","                random: 1,","            }),","            maxRetries: 2,","            requestTimeout: 30 * 1000,","        }, options);","        this.index = 0;","        this.hostsAvailable = new Set();","        this.hostsDisabled = new Set();","        this.timeout = this.options.requestTimeout;","    }","    /**","     * Returns a list of currently active hosts.","     * @return {Host[]}","     */","    Pool.prototype.getHostsAvailable = function () {","        return setToArray(this.hostsAvailable);","    };","    /**","     * Returns a list of hosts that are currently disabled due to network","     * errors.","     * @return {Host[]}","     */","    Pool.prototype.getHostsDisabled = function () {","        return setToArray(this.hostsDisabled);","    };","    /**","     * Inserts a new host to the pool.","     */","    Pool.prototype.addHost = function (url, options) {","        if (options === void 0) { options = {}; }","        var host = new host_1.Host(url, this.options.backoff.reset(), options);","        this.hostsAvailable.add(host);","        return host;","    };","    /**","     * Returns true if there's any host available to by queried.","     * @return {Boolean}","     */","    Pool.prototype.hostIsAvailable = function () {","        return this.hostsAvailable.size > 0;","    };","    /**","     * Makes a request and calls back with the response, parsed as JSON.","     * An error is returned on a non-2xx status code or on a parsing exception.","     */","    Pool.prototype.json = function (options) {","        return this.text(options).then(function (res) { return JSON.parse(res); });","    };","    /**","     * Makes a request and resolves with the plain text response,","     * if possible. An error is raised on a non-2xx status code.","     */","    Pool.prototype.text = function (options) {","        var _this = this;","        return new Promise(function (resolve, reject) {","            _this.stream(options, function (err, res) {","                if (err) {","                    return reject(err);","                }","                var output = '';","                res.on('data', function (str) { return output = output + str.toString(); });","                res.on('end', function () { return resolve(output); });","            });","        });","    };","    /**","     * Makes a request and discards any response body it receives.","     * An error is returned on a non-2xx status code.","     */","    Pool.prototype.discard = function (options) {","        var _this = this;","        return new Promise(function (resolve, reject) {","            _this.stream(options, function (err, res) {","                if (err) {","                    return reject(err);","                }","                res.on('data', function () { });","                res.on('end', function () { return resolve(); });","            });","        });","    };","    /**","     * Ping sends out a request to all available Influx servers, reporting on","     * their response time and version number.","     */","    Pool.prototype.ping = function (timeout, path) {","        if (path === void 0) { path = '/ping'; }","        var todo = [];","        setToArray(this.hostsAvailable)","            .concat(setToArray(this.hostsDisabled))","            .forEach(function (host) {","            var start = Date.now();","            var url = host.url;","            var once = doOnce();","            return todo.push(new Promise(function (resolve) {","                var req = request(Object.assign({","                    hostname: url.hostname,","                    method: 'GET',","                    path: path,","                    port: Number(url.port),","                    protocol: url.protocol,","                    timeout: timeout,","                }, host.options), once(function (res) {","                    resolve({","                        url: url,","                        res: res,","                        online: res.statusCode < 300,","                        rtt: Date.now() - start,","                        version: res.headers['x-influxdb-version'],","                    });","                }));","                var fail = once(function () {","                    resolve({","                        online: false,","                        res: null,","                        rtt: Infinity,","                        url: url,","                        version: null,","                    });","                });","                // Support older Nodes and polyfills which don't allow .timeout() in","                // the request options, wrapped in a conditional for even worse","                // polyfills. See: https://github.com/node-influx/node-influx/issues/221","                if (typeof req.setTimeout === 'function') {","                    req.setTimeout(timeout, fail); // tslint:disable-line","                }","                req.on('timeout', fail);","                req.on('error', fail);","                req.end();","            }));","        });","        return Promise.all(todo);","    };","    /**","     * Makes a request and calls back with the IncomingMessage stream,","     * if possible. An error is returned on a non-2xx status code.","     */","    Pool.prototype.stream = function (options, callback) {","        var _this = this;","        if (!this.hostIsAvailable()) {","            return callback(new ServiceNotAvailableError('No host available'), null);","        }","        var path = options.path;","        if (options.query) {","            path += '?' + querystring.stringify(options.query);","        }","        var once = doOnce();","        var host = this.getHost();","        var req = request(Object.assign({","            headers: { 'content-length': options.body ? new Buffer(options.body).length : 0 },","            hostname: host.url.hostname,","            method: options.method,","            path: path,","            port: Number(host.url.port),","            protocol: host.url.protocol,","            timeout: this.timeout,","        }, host.options), once(function (res) {","            if (res.statusCode >= 500) {","                return _this.handleRequestError(new ServiceNotAvailableError(res.statusMessage), host, options, callback);","            }","            if (res.statusCode >= 300) {","                return RequestError.Create(req, res, function (err) { return callback(err, res); });","            }","            host.success();","            return callback(undefined, res);","        }));","        // Handle network or HTTP parsing errors:","        req.on('error', once(function (err) {","            _this.handleRequestError(err, host, options, callback);","        }));","        // Handle timeouts:","        req.on('timeout', once(function () {","            _this.handleRequestError(new ServiceNotAvailableError('Request timed out'), host, options, callback);","        }));","        // Support older Nodes and polyfills which don't allow .timeout() in the","        // request options, wrapped in a conditional for even worse polyfills. See:","        // https://github.com/node-influx/node-influx/issues/221","        if (typeof req.setTimeout === 'function') {","            req.setTimeout(this.timeout); // tslint:disable-line","        }","        // Write out the body:","        if (options.body) {","            req.write(options.body);","        }","        req.end();","    };","    /**","     * Returns the next available host for querying.","     * @return {Host}","     */","    Pool.prototype.getHost = function () {","        var available = setToArray(this.hostsAvailable);","        var host = available[this.index];","        this.index = (this.index + 1) % available.length;","        return host;","    };","    /**","     * Re-enables the provided host, returning it to the pool to query.","     * @param  {Host} host","     */","    Pool.prototype.enableHost = function (host) {","        this.hostsDisabled.delete(host);","        this.hostsAvailable.add(host);","    };","    /**","     * Disables the provided host, removing it from the query pool. It will be","     * re-enabled after a backoff interval","     */","    Pool.prototype.disableHost = function (host) {","        var _this = this;","        this.hostsAvailable.delete(host);","        this.hostsDisabled.add(host);","        this.index %= Math.max(1, this.hostsAvailable.size);","        setTimeout(function () { return _this.enableHost(host); }, host.fail());","    };","    Pool.prototype.handleRequestError = function (err, host, options, callback) {","        if (!(err instanceof ServiceNotAvailableError) &&","            resubmitErrorCodes.indexOf(err.code) === -1) {","            return callback(err, null);","        }","        this.disableHost(host);","        var retries = options.retries || 0;","        if (retries < this.options.maxRetries && this.hostIsAvailable()) {","            options.retries = retries + 1;","            return this.stream(options, callback);","        }","        callback(err, null);","    };","    return Pool;","}());","exports.Pool = Pool;",""],"l":{"2":1,"3":1,"4":0,"5":0,"6":1,"7":2,"8":2,"9":2,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"23":1,"34":1,"35":1,"36":1,"37":0,"38":0,"39":0,"40":0,"42":1,"44":1,"49":1,"50":1,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"59":1,"60":0,"61":0,"62":0,"64":1,"66":1,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"78":0,"79":0,"83":1,"84":0,"85":0,"86":0,"88":0,"90":1,"91":0,"92":0,"95":0,"104":1,"109":1,"110":0,"119":0,"120":0,"121":0,"122":0,"128":1,"129":0,"136":1,"137":0,"142":1,"143":0,"144":0,"145":0,"146":0,"152":1,"153":0,"159":1,"160":0,"166":1,"167":0,"168":0,"169":0,"170":0,"171":0,"173":0,"174":0,"175":0,"183":1,"184":0,"185":0,"186":0,"187":0,"188":0,"190":0,"191":0,"199":1,"200":0,"201":0,"202":0,"205":0,"206":0,"207":0,"208":0,"209":0,"217":0,"225":0,"226":0,"237":0,"238":0,"240":0,"241":0,"242":0,"245":0,"251":1,"252":0,"253":0,"254":0,"256":0,"257":0,"258":0,"260":0,"261":0,"262":0,"271":0,"272":0,"274":0,"275":0,"277":0,"278":0,"281":0,"282":0,"285":0,"286":0,"291":0,"292":0,"295":0,"296":0,"298":0,"304":1,"305":0,"306":0,"307":0,"308":0,"314":1,"315":0,"316":0,"322":1,"323":0,"324":0,"325":0,"326":0,"327":0,"329":1,"330":0,"332":0,"334":0,"335":0,"336":0,"337":0,"338":0,"340":0,"342":1,"344":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/backoff/exponential.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/backoff/exponential.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":1},"b":{},"f":{"1":1,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":26},"end":{"line":7,"column":38}}},"2":{"name":"ExponentialBackoff","line":13,"loc":{"start":{"line":13,"column":4},"end":{"line":13,"column":41}}},"3":{"name":"(anonymous_3)","line":20,"loc":{"start":{"line":20,"column":44},"end":{"line":20,"column":56}}},"4":{"name":"(anonymous_4)","line":27,"loc":{"start":{"line":27,"column":40},"end":{"line":27,"column":52}}},"5":{"name":"(anonymous_5)","line":35,"loc":{"start":{"line":35,"column":41},"end":{"line":35,"column":53}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":7,"column":0},"end":{"line":39,"column":5}},"3":{"start":{"line":13,"column":4},"end":{"line":16,"column":5}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":31}},"5":{"start":{"line":15,"column":8},"end":{"line":15,"column":25}},"6":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":83}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":98}},"9":{"start":{"line":27,"column":4},"end":{"line":31,"column":6}},"10":{"start":{"line":28,"column":8},"end":{"line":28,"column":56}},"11":{"start":{"line":29,"column":8},"end":{"line":29,"column":40}},"12":{"start":{"line":30,"column":8},"end":{"line":30,"column":20}},"13":{"start":{"line":35,"column":4},"end":{"line":37,"column":6}},"14":{"start":{"line":36,"column":8},"end":{"line":36,"column":52}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":30}},"16":{"start":{"line":40,"column":0},"end":{"line":40,"column":48}}},"branchMap":{},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","/**"," * @class"," * @implements {IBackoffStrategy}"," */","var ExponentialBackoff = (function () {","    /**","     * Creates a new exponential backoff strategy.","     * @see https://en.wikipedia.org/wiki/Exponential_backoff","     * @param {IExponentialOptions} options","     */","    function ExponentialBackoff(options) {","        this.options = options;","        this.counter = 0;","    }","    /**","     * @inheritDoc","     */","    ExponentialBackoff.prototype.getDelay = function () {","        var count = this.counter - Math.round(Math.random() * this.options.random); // tslint:disable-line","        return Math.min(this.options.max, this.options.initial * Math.pow(2, Math.max(count, 0)));","    };","    /**","     * @inheritDoc","     */","    ExponentialBackoff.prototype.next = function () {","        var next = new ExponentialBackoff(this.options);","        next.counter = this.counter + 1;","        return next;","    };","    /**","     * @inheritDoc","     */","    ExponentialBackoff.prototype.reset = function () {","        return new ExponentialBackoff(this.options);","    };","    return ExponentialBackoff;","}());","exports.ExponentialBackoff = ExponentialBackoff;",""],"l":{"2":1,"7":1,"13":1,"14":0,"15":0,"20":1,"21":0,"22":0,"27":1,"28":0,"29":0,"30":0,"35":1,"36":0,"38":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/host.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/host.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":1},"b":{},"f":{"1":1,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":12},"end":{"line":4,"column":24}}},"2":{"name":"Host","line":10,"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":41}}},"3":{"name":"(anonymous_3)","line":20,"loc":{"start":{"line":20,"column":26},"end":{"line":20,"column":38}}},"4":{"name":"(anonymous_4)","line":29,"loc":{"start":{"line":29,"column":29},"end":{"line":29,"column":41}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":4,"column":0},"end":{"line":33,"column":5}},"4":{"start":{"line":10,"column":4},"end":{"line":14,"column":5}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":31}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":40}},"8":{"start":{"line":20,"column":4},"end":{"line":24,"column":6}},"9":{"start":{"line":21,"column":8},"end":{"line":21,"column":44}},"10":{"start":{"line":22,"column":8},"end":{"line":22,"column":43}},"11":{"start":{"line":23,"column":8},"end":{"line":23,"column":21}},"12":{"start":{"line":29,"column":4},"end":{"line":31,"column":6}},"13":{"start":{"line":30,"column":8},"end":{"line":30,"column":44}},"14":{"start":{"line":32,"column":4},"end":{"line":32,"column":16}},"15":{"start":{"line":34,"column":0},"end":{"line":34,"column":20}}},"branchMap":{},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","var urlModule = require(\"url\");","var Host = (function () {","    /**","     * Creates a new Host instance.","     * @param {String} url","     * @param {IBackoffStrategy} backoff","     */","    function Host(url, backoff, options) {","        this.backoff = backoff;","        this.options = options;","        this.url = urlModule.parse(url);","    }","    /**","     * Marks a failure on the host and returns the length of time it","     * should be removed from the pool","     * @return {Number} removal time in milliseconds","     */","    Host.prototype.fail = function () {","        var value = this.backoff.getDelay();","        this.backoff = this.backoff.next();","        return value;","    };","    /**","     * Should be called when a successful operation is run against the host.","     * It resets the host's backoff strategy.","     */","    Host.prototype.success = function () {","        this.backoff = this.backoff.reset();","    };","    return Host;","}());","exports.Host = Host;",""],"l":{"2":1,"3":1,"4":1,"10":1,"11":0,"12":0,"13":0,"20":1,"21":0,"22":0,"23":0,"29":1,"30":0,"32":1,"34":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/results.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/results.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":1,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":1,"76":0,"77":0,"78":0,"79":0,"80":1},"b":{"1":[1,1,1],"2":[1,0,0,0],"3":[0,0],"4":[0,1],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":1,"2":0,"3":0,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"(anonymous_1)","line":2,"loc":{"start":{"line":2,"column":45},"end":{"line":2,"column":57}}},"2":{"name":"(anonymous_2)","line":4,"loc":{"start":{"line":4,"column":47},"end":{"line":4,"column":63}}},"3":{"name":"(anonymous_3)","line":5,"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":24}}},"4":{"name":"(anonymous_4)","line":6,"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":27}}},"5":{"name":"__","line":8,"loc":{"start":{"line":8,"column":8},"end":{"line":8,"column":22}}},"6":{"name":"(anonymous_6)","line":17,"loc":{"start":{"line":17,"column":19},"end":{"line":17,"column":37}}},"7":{"name":"ResultError","line":19,"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":34}}},"8":{"name":"groupMethod","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"9":{"name":"groupsMethod","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}}},"10":{"name":"parseInner","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":39}}},"11":{"name":"assertNoErrors","line":103,"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":29}}},"12":{"name":"parse","line":122,"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":31}}},"13":{"name":"(anonymous_13)","line":128,"loc":{"start":{"line":128,"column":31},"end":{"line":128,"column":49}}},"14":{"name":"parseSingle","line":138,"loc":{"start":{"line":138,"column":0},"end":{"line":138,"column":37}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":11,"column":5}},"2":{"start":{"line":3,"column":4},"end":{"line":5,"column":83}},"3":{"start":{"line":4,"column":65},"end":{"line":4,"column":81}},"4":{"start":{"line":5,"column":26},"end":{"line":5,"column":80}},"5":{"start":{"line":5,"column":43},"end":{"line":5,"column":80}},"6":{"start":{"line":5,"column":68},"end":{"line":5,"column":80}},"7":{"start":{"line":6,"column":4},"end":{"line":10,"column":6}},"8":{"start":{"line":7,"column":8},"end":{"line":7,"column":28}},"9":{"start":{"line":8,"column":8},"end":{"line":8,"column":47}},"10":{"start":{"line":8,"column":24},"end":{"line":8,"column":45}},"11":{"start":{"line":9,"column":8},"end":{"line":9,"column":93}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"14":{"start":{"line":17,"column":0},"end":{"line":25,"column":10}},"15":{"start":{"line":18,"column":4},"end":{"line":18,"column":35}},"16":{"start":{"line":19,"column":4},"end":{"line":23,"column":5}},"17":{"start":{"line":20,"column":8},"end":{"line":20,"column":46}},"18":{"start":{"line":21,"column":8},"end":{"line":21,"column":58}},"19":{"start":{"line":22,"column":8},"end":{"line":22,"column":21}},"20":{"start":{"line":24,"column":4},"end":{"line":24,"column":23}},"21":{"start":{"line":26,"column":0},"end":{"line":26,"column":34}},"22":{"start":{"line":27,"column":0},"end":{"line":47,"column":1}},"23":{"start":{"line":33,"column":4},"end":{"line":33,"column":38}},"24":{"start":{"line":34,"column":4},"end":{"line":34,"column":39}},"25":{"start":{"line":35,"column":4},"end":{"line":37,"column":5}},"26":{"start":{"line":36,"column":8},"end":{"line":36,"column":18}},"27":{"start":{"line":38,"column":4},"end":{"line":45,"column":5}},"28":{"start":{"line":38,"column":7},"end":{"line":45,"column":5}},"29":{"start":{"line":39,"column":8},"end":{"line":43,"column":9}},"30":{"start":{"line":40,"column":12},"end":{"line":42,"column":13}},"31":{"start":{"line":41,"column":16},"end":{"line":41,"column":27}},"32":{"start":{"line":44,"column":8},"end":{"line":44,"column":38}},"33":{"start":{"line":46,"column":4},"end":{"line":46,"column":14}},"34":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"35":{"start":{"line":49,"column":4},"end":{"line":49,"column":26}},"36":{"start":{"line":61,"column":0},"end":{"line":97,"column":1}},"37":{"start":{"line":62,"column":4},"end":{"line":62,"column":43}},"38":{"start":{"line":62,"column":29},"end":{"line":62,"column":41}},"39":{"start":{"line":63,"column":4},"end":{"line":63,"column":21}},"40":{"start":{"line":64,"column":4},"end":{"line":65,"column":77}},"41":{"start":{"line":66,"column":4},"end":{"line":66,"column":23}},"42":{"start":{"line":67,"column":4},"end":{"line":67,"column":49}},"43":{"start":{"line":68,"column":4},"end":{"line":68,"column":20}},"44":{"start":{"line":69,"column":4},"end":{"line":93,"column":5}},"45":{"start":{"line":70,"column":8},"end":{"line":70,"column":129}},"46":{"start":{"line":71,"column":8},"end":{"line":86,"column":9}},"47":{"start":{"line":72,"column":12},"end":{"line":72,"column":25}},"48":{"start":{"line":73,"column":12},"end":{"line":80,"column":13}},"49":{"start":{"line":74,"column":16},"end":{"line":79,"column":17}},"50":{"start":{"line":75,"column":20},"end":{"line":75,"column":82}},"51":{"start":{"line":78,"column":20},"end":{"line":78,"column":51}},"52":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"53":{"start":{"line":82,"column":16},"end":{"line":82,"column":55}},"54":{"start":{"line":84,"column":12},"end":{"line":84,"column":30}},"55":{"start":{"line":85,"column":12},"end":{"line":85,"column":32}},"56":{"start":{"line":87,"column":8},"end":{"line":91,"column":10}},"57":{"start":{"line":92,"column":8},"end":{"line":92,"column":23}},"58":{"start":{"line":94,"column":4},"end":{"line":94,"column":32}},"59":{"start":{"line":95,"column":4},"end":{"line":95,"column":34}},"60":{"start":{"line":96,"column":4},"end":{"line":96,"column":19}},"61":{"start":{"line":103,"column":0},"end":{"line":111,"column":1}},"62":{"start":{"line":104,"column":4},"end":{"line":109,"column":5}},"63":{"start":{"line":105,"column":8},"end":{"line":105,"column":41}},"64":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"65":{"start":{"line":107,"column":12},"end":{"line":107,"column":41}},"66":{"start":{"line":110,"column":4},"end":{"line":110,"column":15}},"67":{"start":{"line":112,"column":0},"end":{"line":112,"column":40}},"68":{"start":{"line":122,"column":0},"end":{"line":130,"column":1}},"69":{"start":{"line":123,"column":4},"end":{"line":123,"column":24}},"70":{"start":{"line":124,"column":4},"end":{"line":129,"column":5}},"71":{"start":{"line":125,"column":8},"end":{"line":125,"column":60}},"72":{"start":{"line":128,"column":8},"end":{"line":128,"column":99}},"73":{"start":{"line":128,"column":51},"end":{"line":128,"column":95}},"74":{"start":{"line":131,"column":0},"end":{"line":131,"column":22}},"75":{"start":{"line":138,"column":0},"end":{"line":145,"column":1}},"76":{"start":{"line":139,"column":4},"end":{"line":139,"column":24}},"77":{"start":{"line":140,"column":4},"end":{"line":143,"column":5}},"78":{"start":{"line":141,"column":8},"end":{"line":142,"column":86}},"79":{"start":{"line":144,"column":4},"end":{"line":144,"column":56}},"80":{"start":{"line":146,"column":0},"end":{"line":146,"column":34}}},"branchMap":{"1":{"line":2,"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":11,"column":4}}]},"2":{"line":3,"type":"binary-expr","locations":[{"start":{"line":3,"column":24},"end":{"line":3,"column":45}},{"start":{"line":4,"column":9},"end":{"line":4,"column":43}},{"start":{"line":4,"column":47},"end":{"line":4,"column":83}},{"start":{"line":5,"column":8},"end":{"line":5,"column":82}}]},"3":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":43},"end":{"line":5,"column":43}},{"start":{"line":5,"column":43},"end":{"line":5,"column":43}}]},"4":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":35},"end":{"line":9,"column":51}},{"start":{"line":9,"column":55},"end":{"line":9,"column":91}}]},"5":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":20},"end":{"line":20,"column":37}},{"start":{"line":20,"column":41},"end":{"line":20,"column":45}}]},"6":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"7":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":28}},{"start":{"line":35,"column":32},"end":{"line":35,"column":65}}]},"8":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":12}},{"start":{"line":40,"column":12},"end":{"line":40,"column":12}}]},"9":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"10":{"line":65,"type":"cond-expr","locations":[{"start":{"line":65,"column":44},"end":{"line":65,"column":71}},{"start":{"line":65,"column":74},"end":{"line":65,"column":76}}]},"11":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":10},"end":{"line":65,"column":23}},{"start":{"line":65,"column":27},"end":{"line":65,"column":41}}]},"12":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":71},"end":{"line":70,"column":73}},{"start":{"line":70,"column":76},"end":{"line":70,"column":78}}]},"13":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":121},"end":{"line":70,"column":123}},{"start":{"line":70,"column":126},"end":{"line":70,"column":128}}]},"14":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":16}},{"start":{"line":74,"column":16},"end":{"line":74,"column":16}}]},"15":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":18},"end":{"line":90,"column":32}},{"start":{"line":90,"column":36},"end":{"line":90,"column":38}}]},"16":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"17":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":4},"end":{"line":124,"column":4}},{"start":{"line":124,"column":4},"end":{"line":124,"column":4}}]},"18":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":140,"column":4}},{"start":{"line":140,"column":4},"end":{"line":140,"column":4}}]}},"code":["\"use strict\";","var __extends = (this && this.__extends) || (function () {","    var extendStatics = Object.setPrototypeOf ||","        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||","        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };","    return function (d, b) {","        extendStatics(d, b);","        function __() { this.constructor = d; }","        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());","    };","})();","Object.defineProperty(exports, \"__esModule\", { value: true });","var grammar_1 = require(\"./grammar\");","/**"," * A ResultError is thrown when a query generates errorful results from Influx."," */","var ResultError = (function (_super) {","    __extends(ResultError, _super);","    function ResultError(message) {","        var _this = _super.call(this) || this;","        _this.message = \"Error from InfluxDB: \" + message;","        return _this;","    }","    return ResultError;","}(Error));","exports.ResultError = ResultError;","function groupMethod(matcher) {","    // We do a tiny bit of 'custom' deep equality checking here, taking","    // advantage of the fact that the tag keys are consistent across all","    // series results. This lets us match groupings much more efficiently,","    // ~6000x faster than the fastest vanilla equality checker (lodash)","    // when operating on large (~100,000 grouping) sets.","    var srcKeys = this.groupsTagsKeys;","    var dstKeys = Object.keys(matcher);","    if (srcKeys.length === 0 || srcKeys.length !== dstKeys.length) {","        return [];","    }","    L: for (var i = 0; i < this.groupRows.length; i += 1) {","        for (var k = 0; k < srcKeys.length; k += 1) {","            if (this.groupRows[i].tags[srcKeys[k]] !== matcher[srcKeys[k]]) {","                continue L;","            }","        }","        return this.groupRows[i].rows;","    }","    return [];","}","function groupsMethod() {","    return this.groupRows;","}","/**"," * Inner parsing function which unpacks the series into a table and attaches"," * methods to the array. This is quite optimized and a bit of a mess to read,"," * but it's all fairly easy procedural logic."," *"," * We do this instead of subclassing Array since subclassing has some"," * undesirable side-effects. For example, calling .slice() on the array"," * makes it impossible to preserve groups as would be necessary if it's"," * subclassed."," */","function parseInner(series, precision) {","    if (series === void 0) { series = []; }","    var results = [];","    var tags = results.groupsTagsKeys","        = series.length && series[0].tags ? Object.keys(series[0].tags) : [];","    var nextGroup = [];","    results.groupRows = new Array(series.length); // tslint:disable-line","    var lastEnd = 0;","    for (var i = 0; i < series.length; i += 1, lastEnd = results.length) {","        var _a = series[i], _b = _a.columns, columns = _b === void 0 ? [] : _b, _c = _a.values, values = _c === void 0 ? [] : _c;","        for (var k = 0; k < values.length; k += 1) {","            var obj = {};","            for (var j = 0; j < columns.length; j += 1) {","                if (columns[j] === 'time') {","                    obj.time = grammar_1.isoOrTimeToDate(values[k][j], precision);","                }","                else {","                    obj[columns[j]] = values[k][j];","                }","            }","            for (var j = 0; j < tags.length; j += 1) {","                obj[tags[j]] = series[i].tags[tags[j]];","            }","            results.push(obj);","            nextGroup.push(obj);","        }","        results.groupRows[i] = {","            name: series[i].name,","            rows: nextGroup,","            tags: series[i].tags || {},","        };","        nextGroup = [];","    }","    results.group = groupMethod;","    results.groups = groupsMethod;","    return results;","}","/**"," * Checks if there are any errors in the IResponse and, if so, it throws them."," * @private"," * @throws {ResultError}"," */","function assertNoErrors(res) {","    for (var i = 0; i < res.results.length; i += 1) {","        var error = res.results[i].error;","        if (error) {","            throw new ResultError(error);","        }","    }","    return res;","}","exports.assertNoErrors = assertNoErrors;","/**"," * From parses out a response to a result or list of responses."," * There are three situations we cover here:"," *  1. A single query without groups, like `select * from myseries`"," *  2. A single query with groups, generated with a `group by` statement"," *     which groups by series *tags*, grouping by times is case (1)"," *  3. Multiple queries of types 1 and 2"," * @private"," */","function parse(res, precision) {","    assertNoErrors(res);","    if (res.results.length === 1) {","        return parseInner(res.results[0].series, precision);","    }","    else {","        return res.results.map(function (result) { return parseInner(result.series, precision); });","    }","}","exports.parse = parse;","/**"," * parseSingle asserts that the response contains a single result,"," * and returns that result."," * @throws {Error} if the number of results is not exactly one"," * @private"," */","function parseSingle(res, precision) {","    assertNoErrors(res);","    if (res.results.length !== 1) {","        throw new Error('node-influx expected the results length to equal 1, but ' +","            (\"it was \" + 0 + \". Please report this here: https://git.io/influx-err\"));","    }","    return parseInner(res.results[0].series, precision);","}","exports.parseSingle = parseSingle;",""],"l":{"2":1,"3":1,"4":0,"5":0,"6":1,"7":1,"8":1,"9":1,"12":1,"13":1,"17":1,"18":1,"19":1,"20":0,"21":0,"22":0,"24":1,"26":1,"27":1,"33":0,"34":0,"35":0,"36":0,"38":0,"39":0,"40":0,"41":0,"44":0,"46":0,"48":1,"49":0,"61":1,"62":0,"63":0,"64":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"78":0,"81":0,"82":0,"84":0,"85":0,"87":0,"92":0,"94":0,"95":0,"96":0,"103":1,"104":0,"105":0,"106":0,"107":0,"110":0,"112":1,"122":1,"123":0,"124":0,"125":0,"128":0,"131":1,"138":1,"139":0,"140":0,"141":0,"144":0,"146":1}},"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/schema.js":{"path":"/home/travis/build/npmtest/node-npmtest-influx/node_modules/influx/lib/src/schema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":1,"61":1,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":14},"end":{"line":8,"column":26}}},"2":{"name":"Schema","line":9,"loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":29}}},"3":{"name":"(anonymous_3)","line":16,"loc":{"start":{"line":16,"column":29},"end":{"line":16,"column":44}}},"4":{"name":"(anonymous_4)","line":23,"loc":{"start":{"line":23,"column":36},"end":{"line":23,"column":54}}},"5":{"name":"(anonymous_5)","line":27,"loc":{"start":{"line":27,"column":32},"end":{"line":27,"column":49}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":41},"end":{"line":68,"column":54}}},"7":{"name":"(anonymous_7)","line":78,"loc":{"start":{"line":78,"column":33},"end":{"line":78,"column":49}}},"8":{"name":"(anonymous_8)","line":81,"loc":{"start":{"line":81,"column":38},"end":{"line":81,"column":53}}},"9":{"name":"(anonymous_9)","line":91,"loc":{"start":{"line":91,"column":27},"end":{"line":91,"column":44}}},"10":{"name":"coerceBadly","line":106,"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":29}}},"11":{"name":"(anonymous_11)","line":107,"loc":{"start":{"line":107,"column":42},"end":{"line":107,"column":59}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"3":{"start":{"line":8,"column":0},"end":{"line":99,"column":5}},"4":{"start":{"line":9,"column":4},"end":{"line":17,"column":5}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":25}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":26}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":61}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":76}},"10":{"start":{"line":16,"column":46},"end":{"line":16,"column":72}},"11":{"start":{"line":23,"column":4},"end":{"line":73,"column":6}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":24}},"15":{"start":{"line":27,"column":8},"end":{"line":65,"column":11}},"16":{"start":{"line":28,"column":12},"end":{"line":30,"column":13}},"17":{"start":{"line":29,"column":16},"end":{"line":29,"column":23}},"18":{"start":{"line":31,"column":12},"end":{"line":31,"column":38}},"19":{"start":{"line":32,"column":12},"end":{"line":32,"column":35}},"20":{"start":{"line":33,"column":12},"end":{"line":33,"column":26}},"21":{"start":{"line":34,"column":12},"end":{"line":36,"column":13}},"22":{"start":{"line":35,"column":16},"end":{"line":35,"column":23}},"23":{"start":{"line":37,"column":12},"end":{"line":37,"column":24}},"24":{"start":{"line":38,"column":12},"end":{"line":63,"column":13}},"25":{"start":{"line":40,"column":20},"end":{"line":40,"column":69}},"26":{"start":{"line":41,"column":20},"end":{"line":41,"column":26}},"27":{"start":{"line":43,"column":20},"end":{"line":45,"column":21}},"28":{"start":{"line":44,"column":24},"end":{"line":44,"column":121}},"29":{"start":{"line":46,"column":20},"end":{"line":46,"column":62}},"30":{"start":{"line":47,"column":20},"end":{"line":47,"column":26}},"31":{"start":{"line":49,"column":20},"end":{"line":51,"column":21}},"32":{"start":{"line":50,"column":24},"end":{"line":50,"column":121}},"33":{"start":{"line":52,"column":20},"end":{"line":52,"column":44}},"34":{"start":{"line":53,"column":20},"end":{"line":53,"column":26}},"35":{"start":{"line":55,"column":20},"end":{"line":57,"column":21}},"36":{"start":{"line":56,"column":24},"end":{"line":56,"column":119}},"37":{"start":{"line":58,"column":20},"end":{"line":58,"column":48}},"38":{"start":{"line":59,"column":20},"end":{"line":59,"column":26}},"39":{"start":{"line":61,"column":20},"end":{"line":62,"column":95}},"40":{"start":{"line":64,"column":12},"end":{"line":64,"column":42}},"41":{"start":{"line":66,"column":8},"end":{"line":66,"column":39}},"42":{"start":{"line":67,"column":8},"end":{"line":71,"column":9}},"43":{"start":{"line":68,"column":12},"end":{"line":68,"column":102}},"44":{"start":{"line":68,"column":56},"end":{"line":68,"column":98}},"45":{"start":{"line":69,"column":12},"end":{"line":70,"column":71}},"46":{"start":{"line":72,"column":8},"end":{"line":72,"column":22}},"47":{"start":{"line":78,"column":4},"end":{"line":87,"column":6}},"48":{"start":{"line":79,"column":8},"end":{"line":79,"column":25}},"49":{"start":{"line":80,"column":8},"end":{"line":80,"column":38}},"50":{"start":{"line":81,"column":8},"end":{"line":81,"column":86}},"51":{"start":{"line":81,"column":55},"end":{"line":81,"column":82}},"52":{"start":{"line":82,"column":8},"end":{"line":85,"column":9}},"53":{"start":{"line":83,"column":12},"end":{"line":84,"column":71}},"54":{"start":{"line":86,"column":8},"end":{"line":86,"column":21}},"55":{"start":{"line":91,"column":4},"end":{"line":97,"column":6}},"56":{"start":{"line":92,"column":8},"end":{"line":92,"column":73}},"57":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"58":{"start":{"line":94,"column":12},"end":{"line":94,"column":31}},"59":{"start":{"line":96,"column":8},"end":{"line":96,"column":19}},"60":{"start":{"line":98,"column":4},"end":{"line":98,"column":18}},"61":{"start":{"line":100,"column":0},"end":{"line":100,"column":24}},"62":{"start":{"line":106,"column":0},"end":{"line":116,"column":1}},"63":{"start":{"line":107,"column":4},"end":{"line":115,"column":7}},"64":{"start":{"line":108,"column":8},"end":{"line":108,"column":34}},"65":{"start":{"line":109,"column":8},"end":{"line":114,"column":9}},"66":{"start":{"line":110,"column":12},"end":{"line":110,"column":59}},"67":{"start":{"line":113,"column":12},"end":{"line":113,"column":42}},"68":{"start":{"line":117,"column":0},"end":{"line":117,"column":34}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":12},"end":{"line":28,"column":12}},{"start":{"line":28,"column":12},"end":{"line":28,"column":12}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":12},"end":{"line":34,"column":12}},{"start":{"line":34,"column":12},"end":{"line":34,"column":12}}]},"3":{"line":38,"type":"switch","locations":[{"start":{"line":39,"column":16},"end":{"line":41,"column":26}},{"start":{"line":42,"column":16},"end":{"line":47,"column":26}},{"start":{"line":48,"column":16},"end":{"line":53,"column":26}},{"start":{"line":54,"column":16},"end":{"line":59,"column":26}},{"start":{"line":60,"column":16},"end":{"line":62,"column":95}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":20},"end":{"line":43,"column":20}},{"start":{"line":43,"column":20},"end":{"line":43,"column":20}}]},"5":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":24},"end":{"line":43,"column":40}},{"start":{"line":43,"column":44},"end":{"line":43,"column":79}}]},"6":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":20},"end":{"line":49,"column":20}},{"start":{"line":49,"column":20},"end":{"line":49,"column":20}}]},"7":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":24},"end":{"line":49,"column":40}},{"start":{"line":49,"column":44},"end":{"line":49,"column":79}}]},"8":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":20},"end":{"line":55,"column":20}},{"start":{"line":55,"column":20},"end":{"line":55,"column":20}}]},"9":{"line":58,"type":"cond-expr","locations":[{"start":{"line":58,"column":38},"end":{"line":58,"column":41}},{"start":{"line":58,"column":44},"end":{"line":58,"column":47}}]},"10":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"11":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"12":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"13":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]}},"code":["\"use strict\";","Object.defineProperty(exports, \"__esModule\", { value: true });","var grammar_1 = require(\"./grammar\");","/**"," * The Schema provides information and utilities for an InfluxDB measurement."," * @private"," */","var Schema = (function () {","    function Schema(options) {","        var _this = this;","        this.options = options;","        this.tagHash = {};","        // fieldNames are sorted for performance: when coerceFields is run the","        // fields will be added to the output in order.","        this.fieldNames = Object.keys(options.fields).sort();","        options.tags.forEach(function (tag) { _this.tagHash[tag] = true; });","    }","    /**","     * coerceFields converts a map of field values to a strings which","     * can be injected into the line protocol without further escaping.","     * The output is given in [key, value] pairs.","     */","    Schema.prototype.coerceFields = function (fields) {","        var _this = this;","        var consumed = 0;","        var output = [];","        this.fieldNames.forEach(function (field) {","            if (!fields.hasOwnProperty(field)) {","                return;","            }","            var value = fields[field];","            var typ = typeof value;","            consumed += 1;","            if (value == null) {","                return;","            }","            var coerced;","            switch (_this.options.fields[field]) {","                case grammar_1.FieldType.STRING:","                    coerced = grammar_1.escape.quoted(String(value));","                    break;","                case grammar_1.FieldType.INTEGER:","                    if (typ !== 'number' && !grammar_1.isNumeric(String(value))) {","                        throw new Error(\"Expected numeric value for \" + _this.ref(field) + \", but got '\" + value + \"'!\");","                    }","                    coerced = String(Math.floor(value)) + 'i';","                    break;","                case grammar_1.FieldType.FLOAT:","                    if (typ !== 'number' && !grammar_1.isNumeric(String(value))) {","                        throw new Error(\"Expected numeric value for \" + _this.ref(field) + \", but got '\" + value + \"'!\");","                    }","                    coerced = String(value);","                    break;","                case grammar_1.FieldType.BOOLEAN:","                    if (typ !== 'boolean') {","                        throw new Error(\"Expected boolean value for \" + _this.ref(field) + \", but got a \" + typ + \"!\");","                    }","                    coerced = value ? 'T' : 'F';","                    break;","                default:","                    throw new Error(\"Unknown field type \" + _this.options.fields[field] + \" for \" + field + \" in \" +","                        (_this.ref() + \". Please ensure that your configuration is correct.\"));","            }","            output.push([field, coerced]);","        });","        var keys = Object.keys(fields);","        if (consumed !== keys.length) {","            var extraneous = keys.filter(function (f) { return _this.fieldNames.indexOf(f) === -1; });","            throw new Error(\"Extraneous fields detected for writing InfluxDB point in \" +","                (this.ref() + \": `\" + extraneous.join('`, `') + \"`.\"));","        }","        return output;","    };","    /**","     * Throws an error if the tags include values other than","     * what was specified in the schema. It returns a list of tag names.","     */","    Schema.prototype.checkTags = function (tags) {","        var _this = this;","        var names = Object.keys(tags);","        var extraneous = names.filter(function (tag) { return !_this.tagHash[tag]; });","        if (extraneous.length > 0) {","            throw new Error(\"Extraneous tags detected for writing InfluxDB point in \" +","                (this.ref() + \": `\" + extraneous.join('`, `') + \"`.\"));","        }","        return names;","    };","    /**","     * Returns the 'db'.'measurement'[.'field'] referencing the current schema.","     */","    Schema.prototype.ref = function (field) {","        var out = this.options.database + '.' + this.options.measurement;","        if (field) {","            out += '.' + field;","        }","        return out;","    };","    return Schema;","}());","exports.Schema = Schema;","/**"," * Coerces the field map to a set of writable values, a la coerceFields,"," * using native guesses based on the field datatypes."," * @private"," */","function coerceBadly(fields) {","    return Object.keys(fields).sort().map(function (field) {","        var value = fields[field];","        if (typeof value === 'string') {","            return [field, grammar_1.escape.quoted(value)];","        }","        else {","            return [field, String(value)];","        }","    });","}","exports.coerceBadly = coerceBadly;",""],"l":{"2":1,"3":1,"8":1,"9":1,"10":0,"11":0,"12":0,"15":0,"16":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"31":0,"32":0,"33":0,"34":0,"35":0,"37":0,"38":0,"40":0,"41":0,"43":0,"44":0,"46":0,"47":0,"49":0,"50":0,"52":0,"53":0,"55":0,"56":0,"58":0,"59":0,"61":0,"64":0,"66":0,"67":0,"68":0,"69":0,"72":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"86":0,"91":1,"92":0,"93":0,"94":0,"96":0,"98":1,"100":1,"106":1,"107":0,"108":0,"109":0,"110":0,"113":0,"117":1}}}